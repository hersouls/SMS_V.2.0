name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Run E2E tests
        run: npm run test:e2e

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env.local
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" > .env.local
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.local

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: npm run lighthouse:ci

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: moonwave-v2.hersouls.dev

      - name: Create deployment status
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìä Lighthouse score: $(cat lighthouse-report.json | jq -r '.categories.performance.score * 100')"
          echo "üéØ Accessibility score: $(cat lighthouse-report.json | jq -r '.categories.accessibility.score * 100')"
          echo "üîç SEO score: $(cat lighthouse-report.json | jq -r '.categories.seo.score * 100')"

  performance-monitor:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lighthouse report
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-report
          path: ./

      - name: Check performance thresholds
        run: |
          PERFORMANCE_SCORE=$(cat lighthouse-report.json | jq -r '.categories.performance.score * 100')
          ACCESSIBILITY_SCORE=$(cat lighthouse-report.json | jq -r '.categories.accessibility.score * 100')
          SEO_SCORE=$(cat lighthouse-report.json | jq -r '.categories.seo.score * 100')
          
          echo "Performance Score: $PERFORMANCE_SCORE"
          echo "Accessibility Score: $ACCESSIBILITY_SCORE"
          echo "SEO Score: $SEO_SCORE"
          
          if (( $(echo "$PERFORMANCE_SCORE < 90" | bc -l) )); then
            echo "‚ùå Performance score below threshold (90)"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY_SCORE < 95" | bc -l) )); then
            echo "‚ùå Accessibility score below threshold (95)"
            exit 1
          fi
          
          if (( $(echo "$SEO_SCORE < 90" | bc -l) )); then
            echo "‚ùå SEO score below threshold (90)"
            exit 1
          fi
          
          echo "‚úÖ All scores meet thresholds"