Moonwave 프로젝트의 디자인 시스템과 기술 아키텍처를 기반으로 재사용 가능한 컴포넌트 라이브러리 문서를 제작합니다. Utility-First CSS, Pretendard 폰트, Container Queries를 활용한 React + TypeScript 컴포넌트들을 체계적으로 정리합니다.

## 분석
프로젝트 문서 분석 결과:

디자인 원칙: Utility-First CSS, 아이콘 중심 UI, 한글 최적화
기술 스택: React + TypeScript + Tailwind CSS + Container Queries
컴포넌트 구조: ui/ (기본), layout/ (레이아웃), features/ (기능별)
디자인 토큰: 표준화된 spacing, color, shadow, typography
접근성: ARIA 레이블, 키보드 내비게이션 필수

## 실행

# 🌊 Moonwave 컴포넌트 라이브러리 v2.0

## ⚠️ CRITICAL WARNINGS - READ FIRST

**⚠️ IMPORTANT: Always cd SMS_V.2.0 before running any commands**
**⚠️ DO NOT create src folder manually - Vite already created it**
**⚠️ GitHub Actions workflows must be in root .github folder**
**⚠️ All development work must happen inside SMS_V.2.0 directory**

---

## 목차

1. 개요
2. 설치 및 설정
3. 기본 컴포넌트
4. 레이아웃 컴포넌트
5. 기능별 컴포넌트
6. 유틸리티
7. 사용 예시
8. Common Mistakes and Solutions

---

## 1. 개요

### 1.1 디자인 원칙

- **Utility-First CSS**: Tailwind CSS 기반 스타일링
- **타입 안전성**: TypeScript로 모든 Props 정의
- **접근성 우선**: ARIA 속성과 키보드 내비게이션
- **반응형 설계**: Container Queries 활용
- **한글 최적화**: Pretendard 폰트와 한글 타이포그래피

### 1.2 폴더 구조

```
SMS_V.2.0/src/components/
├── ui/              # 기본 UI 컴포넌트
├── layout/          # 레이아웃 컴포넌트
├── features/        # 기능별 컴포넌트
└── index.ts         # 통합 export
```

---

## 2. 설치 및 설정

### 2.1 필수 의존성

```bash
# ⚠️ IMPORTANT: Make sure you're in SMS_V.2.0 directory
cd SMS_V.2.0

# Install dependencies (--legacy-peer-deps for Vite 7 compatibility)
npm install --legacy-peer-deps clsx tailwind-merge @radix-ui/react-icons lucide-react
npm install --legacy-peer-deps -D @tailwindcss/container-queries
```

### 2.2 유틸리티 함수

```typescript
// SMS_V.2.0/src/lib/utils.ts
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

---

## 3. 기본 컴포넌트

### 3.1 Button

```typescript
// SMS_V.2.0/src/components/ui/Button.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'destructive' | 'ghost' | 'gradient'
  size?: 'sm' | 'md' | 'lg' | 'icon'
  loading?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', loading, children, disabled, ...props }, ref) => {
    const baseClasses = cn(
      'font-pretendard font-semibold rounded-lg transition-all duration-200',
      'focus:outline-none focus:ring-2 focus:ring-offset-2',
      'tracking-ko-normal break-keep-ko antialiased',
      'transform active:scale-95'
    )
    
    const variants = {
      primary: 'bg-blue-500 hover:bg-blue-600 text-white focus:ring-blue-500',
      secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900 focus:ring-gray-500',
      destructive: 'bg-red-500 hover:bg-red-600 text-white focus:ring-red-500',
      ghost: 'bg-transparent hover:bg-gray-100 text-gray-700',
      gradient: 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg'
    }
    
    const sizes = {
      sm: 'py-1.5 px-3 text-sm',
      md: 'py-2 px-4 text-base',
      lg: 'py-3 px-6 text-lg',
      icon: 'p-2 w-10 h-10'
    }
    
    return (
      <button
        ref={ref}
        className={cn(
          baseClasses,
          variants[variant],
          sizes[size],
          (disabled || loading) && 'opacity-70 cursor-not-allowed',
          className
        )}
        disabled={disabled || loading}
        {...props}
      >
        {loading && (
          <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
          </svg>
        )}
        {children}
      </button>
    )
  }
)

Button.displayName = 'Button'

export { Button }
```

### 3.2 Input

```typescript
// SMS_V.2.0/src/components/ui/Input.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string
  error?: string
  helperText?: string
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, label, error, helperText, ...props }, ref) => {
    return (
      <div className="space-y-2">
        {label && (
          <label className="block text-sm font-medium text-gray-700 tracking-ko-normal">
            {label}
          </label>
        )}
        <input
          type={type}
          className={cn(
            'flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm',
            'placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500',
            'focus:border-transparent tracking-ko-normal break-keep-ko',
            error && 'border-red-500 focus:ring-red-500',
            className
          )}
          ref={ref}
          {...props}
        />
        {error && (
          <p className="text-sm text-red-600 tracking-ko-normal">{error}</p>
        )}
        {helperText && !error && (
          <p className="text-sm text-gray-500 tracking-ko-normal">{helperText}</p>
        )}
      </div>
    )
  }
)

Input.displayName = 'Input'

export { Input }
```

### 3.3 Card

```typescript
// SMS_V.2.0/src/components/ui/Card.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border border-gray-200 bg-white text-gray-950 shadow-sm',
      className
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight tracking-ko-normal',
      className
    )}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-gray-500 tracking-ko-normal', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```

---

## 4. 레이아웃 컴포넌트

### 4.1 Header

```typescript
// SMS_V.2.0/src/components/layout/Header.tsx
import * as React from 'react'
import { Button } from '@/components/ui/Button'
import { useAuth } from '@/hooks/useAuth'

export interface HeaderProps {
  className?: string
}

export function Header({ className }: HeaderProps) {
  const { user, signOut } = useAuth()

  return (
    <header className={cn(
      'sticky top-0 z-50 w-full border-b border-gray-200 bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60',
      className
    )}>
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <h1 className="text-xl font-bold text-gray-900 tracking-ko-normal">
            Moonwave
          </h1>
        </div>
        
        <nav className="flex items-center space-x-4">
          {user ? (
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-700 tracking-ko-normal">
                {user.email}
              </span>
              <Button variant="ghost" size="sm" onClick={signOut}>
                로그아웃
              </Button>
            </div>
          ) : (
            <Button variant="primary" size="sm">
              로그인
            </Button>
          )}
        </nav>
      </div>
    </header>
  )
}
```

### 4.2 Sidebar

```typescript
// SMS_V.2.0/src/components/layout/Sidebar.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'
import { HomeIcon, CreditCardIcon, CalendarIcon, ChartBarIcon } from '@heroicons/react/24/outline'

interface SidebarItem {
  name: string
  href: string
  icon: React.ComponentType<{ className?: string }>
}

const navigation: SidebarItem[] = [
  { name: '대시보드', href: '/dashboard', icon: HomeIcon },
  { name: '구독 관리', href: '/subscriptions', icon: CreditCardIcon },
  { name: '결제 일정', href: '/calendar', icon: CalendarIcon },
  { name: '통계', href: '/analytics', icon: ChartBarIcon },
]

export interface SidebarProps {
  className?: string
}

export function Sidebar({ className }: SidebarProps) {
  return (
    <aside className={cn(
      'w-64 bg-gray-50 border-r border-gray-200 min-h-screen',
      className
    )}>
      <nav className="mt-8 px-4">
        <ul className="space-y-2">
          {navigation.map((item) => (
            <li key={item.name}>
              <a
                href={item.href}
                className={cn(
                  'flex items-center px-4 py-2 text-sm font-medium rounded-md',
                  'text-gray-700 hover:text-gray-900 hover:bg-gray-100',
                  'tracking-ko-normal transition-colors'
                )}
              >
                <item.icon className="mr-3 h-5 w-5" />
                {item.name}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </aside>
  )
}
```

---

## 5. 기능별 컴포넌트

### 5.1 SubscriptionCard

```typescript
// SMS_V.2.0/src/components/features/SubscriptionCard.tsx
import * as React from 'react'
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { Subscription } from '@/types/subscription'

export interface SubscriptionCardProps {
  subscription: Subscription
  onEdit?: (subscription: Subscription) => void
  onDelete?: (id: string) => void
  className?: string
}

export function SubscriptionCard({ 
  subscription, 
  onEdit, 
  onDelete, 
  className 
}: SubscriptionCardProps) {
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(amount)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="tracking-ko-normal">
          {subscription.service_name}
        </CardTitle>
        <p className="text-sm text-gray-500 tracking-ko-normal">
          {subscription.category}
        </p>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between">
            <span className="text-sm text-gray-600 tracking-ko-normal">월 요금:</span>
            <span className="font-semibold tracking-ko-normal">
              {formatCurrency(subscription.monthly_fee)}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-600 tracking-ko-normal">다음 결제일:</span>
            <span className="text-sm tracking-ko-normal">
              {formatDate(subscription.next_billing_date)}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-sm text-gray-600 tracking-ko-normal">상태:</span>
            <span className={cn(
              'text-sm font-medium',
              subscription.status === 'active' && 'text-green-600',
              subscription.status === 'cancelled' && 'text-red-600',
              subscription.status === 'paused' && 'text-yellow-600'
            )}>
              {subscription.status === 'active' && '활성'}
              {subscription.status === 'cancelled' && '취소됨'}
              {subscription.status === 'paused' && '일시정지'}
            </span>
          </div>
        </div>
      </CardContent>
      
      <CardFooter className="flex space-x-2">
        <Button 
          variant="outline" 
          size="sm" 
          onClick={() => onEdit?.(subscription)}
          className="flex-1"
        >
          수정
        </Button>
        <Button 
          variant="destructive" 
          size="sm" 
          onClick={() => onDelete?.(subscription.id)}
          className="flex-1"
        >
          삭제
        </Button>
      </CardFooter>
    </Card>
  )
}
```

---

## 6. 유틸리티

### 6.1 컴포넌트 통합 export

```typescript
// SMS_V.2.0/src/components/index.ts
// UI Components
export { Button } from './ui/Button'
export { Input } from './ui/Input'
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } from './ui/Card'

// Layout Components
export { Header } from './layout/Header'
export { Sidebar } from './layout/Sidebar'

// Feature Components
export { SubscriptionCard } from './features/SubscriptionCard'
```

### 6.2 스타일 유틸리티

```typescript
// SMS_V.2.0/src/lib/styles.ts
export const commonStyles = {
  // 한글 텍스트 최적화
  koreanText: 'tracking-ko-normal break-keep-ko antialiased',
  
  // 반응형 컨테이너
  container: 'container mx-auto px-4',
  
  // 그라디언트
  gradient: 'bg-gradient-to-r from-blue-600 to-purple-600',
  
  // 그림자
  shadow: 'shadow-lg hover:shadow-xl transition-shadow duration-300',
  
  // 애니메이션
  fadeIn: 'animate-in fade-in duration-300',
  slideIn: 'animate-in slide-in-from-bottom-4 duration-300'
}
```

---

## 7. 사용 예시

### 7.1 기본 사용법

```typescript
// SMS_V.2.0/src/pages/Dashboard.tsx
import { Button, Card, CardHeader, CardTitle, CardContent } from '@/components/ui'
import { Header, Sidebar } from '@/components/layout'
import { SubscriptionCard } from '@/components/features'

export function Dashboard() {
  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <div className="flex">
        <Sidebar />
        <main className="flex-1 p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>총 구독 수</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold">12</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>월 총 비용</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold">₩89,000</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>이번 달 결제</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold">3</p>
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </div>
  )
}
```

### 7.2 폼 예시

```typescript
// SMS_V.2.0/src/components/features/SubscriptionForm.tsx
import { useState } from 'react'
import { Button, Input, Card, CardHeader, CardTitle, CardContent } from '@/components/ui'

export function SubscriptionForm() {
  const [formData, setFormData] = useState({
    serviceName: '',
    monthlyFee: '',
    category: '',
    notes: ''
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // 폼 제출 로직
  }

  return (
    <Card className="max-w-md mx-auto">
      <CardHeader>
        <CardTitle>새 구독 추가</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            label="서비스명"
            placeholder="Netflix"
            value={formData.serviceName}
            onChange={(e) => setFormData(prev => ({ ...prev, serviceName: e.target.value }))}
            required
          />
          
          <Input
            label="월 요금"
            type="number"
            placeholder="17,000"
            value={formData.monthlyFee}
            onChange={(e) => setFormData(prev => ({ ...prev, monthlyFee: e.target.value }))}
            required
          />
          
          <Input
            label="카테고리"
            placeholder="엔터테인먼트"
            value={formData.category}
            onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
          />
          
          <Input
            label="메모"
            placeholder="추가 정보"
            value={formData.notes}
            onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
          />
          
          <Button type="submit" className="w-full">
            구독 추가
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
```

---

## 🔧 Common Mistakes and Solutions

### ❌ Common Mistakes

1. **Creating duplicate src folders**
   - ❌ Wrong: Creating another src folder inside SMS_V.2.0
   - ✅ Correct: Use existing SMS_V.2.0/src folder created by Vite

2. **Running commands in wrong directory**
   - ❌ Wrong: Running npm commands from repository root
   - ✅ Correct: Always `cd SMS_V.2.0` first

3. **GitHub Actions in wrong location**
   - ❌ Wrong: Placing workflows in SMS_V.2.0/.github/
   - ✅ Correct: Place in root .github/workflows/

4. **npm dependency conflicts**
   - ❌ Wrong: Using `npm install` without --legacy-peer-deps
   - ✅ Correct: Use `npm install --legacy-peer-deps`

5. **Incorrect file paths in imports**
   - ❌ Wrong: `import Button from '../components/Button'`
   - ✅ Correct: `import Button from '@/components/ui/Button'`

6. **Missing TypeScript interfaces**
   - ❌ Wrong: Using any type for props
   - ✅ Correct: Define proper interfaces for all props

7. **Ignoring accessibility**
   - ❌ Wrong: Not adding ARIA labels or keyboard navigation
   - ✅ Correct: Always include accessibility features

### ✅ Solutions

1. **Directory Structure Verification**
   ```bash
   # Always verify you're in the right directory
   pwd  # Should show: /workspace/SMS_V.2.0
   ls   # Should show: src/, package.json, vite.config.ts, etc.
   ```

2. **Path Alias Configuration**
   ```typescript
   // SMS_V.2.0/tsconfig.app.json
   {
     "compilerOptions": {
       "paths": {
         "@/*": ["./src/*"]
       }
     }
   }
   ```

3. **Component Import Best Practices**
   ```typescript
   // ✅ Good - Use path aliases
   import { Button } from '@/components/ui/Button'
   import { Card } from '@/components/ui/Card'
   
   // ✅ Good - Use barrel exports
   import { Button, Card } from '@/components/ui'
   
   // ❌ Avoid - Relative paths
   import { Button } from '../../../components/ui/Button'
   ```

4. **TypeScript Interface Best Practices**
   ```typescript
   // ✅ Good - Extend HTML attributes
   export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
     variant?: 'primary' | 'secondary'
     size?: 'sm' | 'md' | 'lg'
   }
   
   // ✅ Good - Use proper types
   export interface SubscriptionCardProps {
     subscription: Subscription
     onEdit?: (subscription: Subscription) => void
   }
   ```

5. **Accessibility Best Practices**
   ```typescript
   // ✅ Good - Include ARIA labels and keyboard support
   <button
     aria-label="Close modal"
     onKeyDown={(e) => e.key === 'Escape' && onClose()}
     onClick={onClose}
   >
     <XIcon className="h-4 w-4" />
   </button>
   ```

6. **Korean Text Optimization**
   ```typescript
   // ✅ Good - Use Korean typography classes
   <p className="tracking-ko-normal break-keep-ko antialiased">
     한글 텍스트는 적절한 간격과 줄바꿈이 필요합니다.
   </p>
   ```

7. **Component Testing**
   ```typescript
   // ✅ Good - Test component rendering
   import { render, screen } from '@testing-library/react'
   import { Button } from '@/components/ui/Button'
   
   test('Button renders with correct text', () => {
     render(<Button>Click me</Button>)
     expect(screen.getByRole('button')).toHaveTextContent('Click me')
   })
   ```

---

## 📋 Verification Checklist

Before using any component:

- [ ] Verify you are in SMS_V.2.0 directory: `pwd`
- [ ] Check that component exists in correct location: `ls src/components/ui/`
- [ ] Verify TypeScript interfaces are properly defined
- [ ] Test component with Korean text
- [ ] Check accessibility features (ARIA labels, keyboard navigation)
- [ ] Verify responsive design works correctly
- [ ] Test component with different props and variants

---

## 🚀 Quick Start Commands

```bash
# Clone repository
git clone https://github.com/yourusername/moonwave-v2.git
cd moonwave-v2

# Navigate to project directory
cd SMS_V.2.0

# Install dependencies
npm install --legacy-peer-deps

# Start development server
npm run dev

# Build for production
npm run build

# Deploy (automatic via GitHub Actions)
git add .
git commit -m "feat: new component"
git push origin main
```
