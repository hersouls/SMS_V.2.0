## 요약
Moonwave 개발 환경 통합 가이드를 정적 서비스(GitHub Pages)와 동적 서비스(Vercel) 버전으로 분리하여, localhost 개발 환경을 지원하는 GitHub Pages 버전을 제공합니다.

## 분석
기존 가이드의 "localhost 금지" 정책을 제거하고, 실제 개발 워크플로우에 맞게 로컬 개발 → GitHub 푸시 → 자동 배포 프로세스를 구성합니다. Mock 데이터는 여전히 최소화하되, 개발 초기 단계에서는 허용합니다.

## 실행

# 🧭 Moonwave 개발 환경 통합 가이드 - GitHub Pages 버전 (정적 서비스)

문유는 **가짜 흐름이 아닌, 실제 흐름으로 설계한다.**  
이 프로젝트는 로컬 개발 환경에서 시작하여 **GitHub Pages + Supabase 기반의 정적 웹서비스**로 배포됩니다.

---

## ✅ 개발 환경 개요 (정적 서비스)

| 항목 | 사용 기술 |
|------|-----------|
| IDE | [Cursor](https://www.cursor.sh) (AI 기반 개발 환경) |
| 로컬 개발 | localhost:5173 (Vite) |
| 백엔드 | [Supabase](https://supabase.com) (PostgreSQL + Auth + Storage) |
| 배포 | GitHub Actions → GitHub Pages |
| 도메인 | `https://xxx.moonwave.kr` (커스텀 도메인) |
| 프론트엔드 | React + TypeScript + Vite |
| 스타일링 | Tailwind CSS + Container Queries |

---

## 🚀 개발 워크플로우

### 1단계: 로컬 개발
```bash
# 프로젝트 클론
git clone https://github.com/yourusername/moonwave-static.git
cd moonwave-static

# 의존성 설치
npm install

# 환경 변수 설정
cp .env.example .env.local

# 로컬 개발 서버 실행
npm run dev
# http://localhost:5173 에서 개발
```

### 2단계: Supabase 연동
```env
# .env.local
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your_anon_key
```

### 3단계: GitHub 푸시 & 자동 배포
```bash
# 변경사항 커밋
git add .
git commit -m "feat: 새로운 기능 추가"
git push origin main

# GitHub Actions가 자동으로 빌드 및 배포 실행
```

---

## 🌐 Supabase 설정

### 환경별 설정 파일
```bash
# 개발 환경
.env.local                # localhost 개발용 (git 제외)

# 프로덕션 환경  
.env.production          # GitHub Secrets에서 자동 주입
```

### Supabase 프로젝트 설정
```typescript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

---

## ⚙ GitHub Actions 자동 배포

```yaml
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

---

## 🛠 프로젝트 구조

```
moonwave-static/
├── .github/
│   └── workflows/
│       └── deploy.yml          # GitHub Actions 배포 설정
├── public/
│   └── CNAME                   # 커스텀 도메인 설정
├── src/
│   ├── components/
│   │   ├── ui/                 # 재사용 가능한 UI 컴포넌트
│   │   ├── layout/             # 레이아웃 컴포넌트
│   │   └── features/           # 기능별 컴포넌트
│   ├── contexts/
│   │   └── SupabaseContext.tsx # Supabase 컨텍스트
│   ├── hooks/
│   │   └── useSupabase.ts      # Supabase 훅
│   ├── lib/
│   │   ├── supabase.ts         # Supabase 클라이언트
│   │   └── utils.ts            # 유틸리티 함수
│   ├── pages/
│   │   ├── Home.tsx            # 홈 페이지
│   │   ├── Dashboard.tsx       # 대시보드
│   │   └── Auth.tsx            # 인증 페이지
│   ├── styles/
│   │   └── globals.css         # Tailwind CSS
│   ├── App.tsx
│   └── main.tsx
├── .env.example                # 환경 변수 템플릿
├── .gitignore
├── index.html
├── package.json
├── tailwind.config.js
├── tsconfig.json
└── vite.config.ts
```

---

## 🔧 Vite 설정

```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  base: process.env.NODE_ENV === 'production' 
    ? '/moonwave-static/' // GitHub Pages 서브디렉토리
    : '/',
  build: {
    outDir: 'dist',
    sourcemap: true,
  },
})
```

---

## 🎯 개발 시작하기

### 1. 프로젝트 초기화
```bash
# 새 프로젝트 생성
npm create vite@latest moonwave-static -- --template react-ts

# Tailwind CSS 설치
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

# Supabase 클라이언트 설치
npm install @supabase/supabase-js

# 추가 의존성
npm install @tailwindcss/container-queries clsx tailwind-merge
npm install @radix-ui/react-icons lucide-react
```

### 2. Tailwind 설정
```javascript
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        pretendard: ['Pretendard Variable', 'Pretendard', '-apple-system', 'BlinkMacSystemFont', 'sans-serif'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/container-queries'),
  ],
}
```

### 3. 환경 변수 설정
```bash
# .env.example
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key
```

### 4. GitHub Repository 설정
```bash
# GitHub에서 새 repository 생성 후
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/yourusername/moonwave-static.git
git push -u origin main
```

### 5. GitHub Pages 활성화
1. Repository Settings → Pages
2. Source: GitHub Actions 선택
3. Custom domain: xxx.moonwave.kr 입력

---

## 📱 로컬 개발 가이드

### 개발 서버 실행
```bash
# 개발 모드
npm run dev

# 빌드 테스트
npm run build
npm run preview
```

### Mock 데이터 사용 (개발 초기)
```typescript
// src/hooks/useSubscriptions.ts
const useSubscriptions = () => {
  const [subscriptions, setSubscriptions] = useState([])
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    // 개발 초기: Mock 데이터 사용
    if (import.meta.env.DEV && !import.meta.env.VITE_SUPABASE_URL) {
      setSubscriptions(mockSubscriptions)
      setLoading(false)
      return
    }
    
    // 프로덕션: Supabase 실제 데이터
    fetchSubscriptionsFromSupabase()
  }, [])
}
```

---

## 🚀 배포 프로세스

### 1. GitHub Secrets 설정
Repository Settings → Secrets and variables → Actions에서 추가:
- `VITE_SUPABASE_URL`
- `VITE_SUPABASE_ANON_KEY`

### 2. 자동 배포 확인
```bash
# main 브랜치 푸시 시 자동 배포
git push origin main

# Actions 탭에서 배포 상태 확인
# https://github.com/yourusername/moonwave-static/actions
```

### 3. 커스텀 도메인 설정
```bash
# public/CNAME 파일 생성
echo "xxx.moonwave.kr" > public/CNAME
```

---

## 🔍 개발 vs 프로덕션 차이

| 항목 | 개발 환경 | 프로덕션 환경 |
|------|----------|-------------|
| URL | http://localhost:5173 | https://xxx.moonwave.kr |
| 환경 변수 | .env.local | GitHub Secrets |
| 데이터 | Mock 허용 | Supabase 필수 |
| 빌드 | Vite HMR | 정적 파일 |
| 에러 처리 | 상세 로그 | 사용자 친화적 메시지 |

---

## 📋 체크리스트

### 개발 환경 설정
- [ ] Node.js 20+ 설치
- [ ] Cursor IDE 설치
- [ ] Git 설정 완료
- [ ] npm 의존성 설치

### Supabase 설정
- [ ] Supabase 프로젝트 생성
- [ ] 환경 변수 설정
- [ ] RLS 정책 구성
- [ ] 초기 데이터 삽입

### GitHub 설정
- [ ] Repository 생성
- [ ] GitHub Secrets 설정
- [ ] GitHub Pages 활성화
- [ ] 커스텀 도메인 연결

### 배포 확인
- [ ] GitHub Actions 실행 성공
- [ ] 사이트 접속 확인
- [ ] Supabase 연동 확인
- [ ] 성능 테스트 완료

---

*이 가이드는 정적 서비스(GitHub Pages) 버전입니다. 동적 서비스(Vercel + Next.js) 버전은 별도 문서를 참조하세요.*
