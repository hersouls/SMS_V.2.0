## 요약
Moonwave 개발 환경 통합 가이드를 정적 서비스(GitHub Pages)와 동적 서비스(Vercel) 버전으로 분리하여, localhost 개발 환경을 지원하는 GitHub Pages 버전을 제공합니다.

## 분석
기존 가이드의 "localhost 금지" 정책을 제거하고, 실제 개발 워크플로우에 맞게 로컬 개발 → GitHub 푸시 → 자동 배포 프로세스를 구성합니다. Mock 데이터는 여전히 최소화하되, 개발 초기 단계에서는 허용합니다.

## 실행

# 🧭 Moonwave 개발 환경 통합 가이드 - GitHub Pages 버전 (정적 서비스)

문유는 **가짜 흐름이 아닌, 실제 흐름으로 설계한다.**  
이 프로젝트는 로컬 개발 환경에서 시작하여 **GitHub Pages + Supabase 기반의 정적 웹서비스**로 배포됩니다.

---

## ⚠️ CRITICAL WARNINGS - READ FIRST

**⚠️ IMPORTANT: Always cd SMS_V.2.0 before running any commands**
**⚠️ DO NOT create src folder manually - Vite already created it**
**⚠️ GitHub Actions workflows must be in root .github folder**
**⚠️ All development work must happen inside SMS_V.2.0 directory**

---

## ✅ 개발 환경 개요 (정적 서비스)

| 항목 | 사용 기술 |
|------|-----------|
| IDE | [Cursor](https://www.cursor.sh) (AI 기반 개발 환경) |
| 로컬 개발 | localhost:5173 (Vite) |
| 백엔드 | [Supabase](https://supabase.com) (PostgreSQL + Auth + Storage) |
| 배포 | GitHub Actions → GitHub Pages |
| 도메인 | `https://xxx.moonwave.kr` (커스텀 도메인) |
| 프론트엔드 | React + TypeScript + Vite |
| 스타일링 | Tailwind CSS + Container Queries |

---

## 🚀 개발 워크플로우

### 1단계: 로컬 개발
```bash
# 프로젝트 클론
git clone https://github.com/yourusername/moonwave-static.git
cd moonwave-static

# ⚠️ IMPORTANT: Navigate to project directory
cd SMS_V.2.0

# 의존성 설치 (--legacy-peer-deps for Vite 7 compatibility)
npm install --legacy-peer-deps

# 환경 변수 설정
cp .env.example .env.local

# 로컬 개발 서버 실행
npm run dev
# http://localhost:5173 에서 개발
```

### 2단계: Supabase 연동
```env
# SMS_V.2.0/.env.local
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your_anon_key
```

### 3단계: GitHub 푸시 & 자동 배포
```bash
# ⚠️ IMPORTANT: Make sure you're in SMS_V.2.0 directory
cd SMS_V.2.0

# 변경사항 커밋
git add .
git commit -m "feat: 새로운 기능 추가"
git push origin main

# GitHub Actions가 자동으로 빌드 및 배포 실행
```

---

## 🌐 Supabase 설정

### 환경별 설정 파일
```bash
# 개발 환경
SMS_V.2.0/.env.local                # localhost 개발용 (git 제외)

# 프로덕션 환경  
SMS_V.2.0/.env.production          # GitHub Secrets에서 자동 주입
```

### Supabase 프로젝트 설정
```typescript
// SMS_V.2.0/src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

---

## ⚙ GitHub Actions 자동 배포

```yaml
# .github/workflows/deploy.yml (Repository ROOT)
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: SMS_V.2.0/package-lock.json
    
    - name: Install dependencies
      working-directory: SMS_V.2.0
      run: npm ci --legacy-peer-deps
    
    - name: Build
      working-directory: SMS_V.2.0
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./SMS_V.2.0/dist
```

---

## 📁 프로젝트 구조

```
Repository Root/
├── .github/
│   └── workflows/
│       ├── deploy.yml          # GitHub Actions (ROOT)
│       └── ci.yml
├── docs/                       # Documentation
├── SMS_V.2.0/                  # Main project directory
│   ├── src/                    # Source code (Vite created)
│   │   ├── components/
│   │   ├── pages/
│   │   ├── lib/
│   │   └── ...
│   ├── public/
│   ├── package.json
│   ├── vite.config.ts
│   ├── tailwind.config.js
│   └── .env.local
└── README.md
```

---

## 🔧 개발 환경 설정

### 1. Cursor IDE 설정

```json
// .vscode/settings.json (in SMS_V.2.0/)
{
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "tailwindCSS.includeLanguages": {
    "typescript": "javascript",
    "typescriptreact": "javascript"
  },
  "emmet.includeLanguages": {
    "typescript": "html",
    "typescriptreact": "html"
  }
}
```

### 2. TypeScript 설정

```json
// SMS_V.2.0/tsconfig.app.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

### 3. Vite 설정

```typescript
// SMS_V.2.0/vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  base: '/moonwave-static/', // GitHub Pages base path
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})
```

---

## 🚀 배포 프로세스

### 1. 로컬 빌드 테스트
```bash
# ⚠️ IMPORTANT: Make sure you're in SMS_V.2.0 directory
cd SMS_V.2.0

# 빌드 테스트
npm run build

# 빌드 결과 확인
ls dist/
```

### 2. GitHub Secrets 설정
GitHub Repository → Settings → Secrets and variables → Actions:

| Secret Name | Value |
|-------------|-------|
| `VITE_SUPABASE_URL` | `https://your-project.supabase.co` |
| `VITE_SUPABASE_ANON_KEY` | `your_anon_key` |

### 3. 자동 배포 확인
- GitHub Actions 탭에서 워크플로우 실행 상태 확인
- 배포 완료 후 `https://username.github.io/moonwave-static/` 접속

---

## 🔧 Common Mistakes and Solutions

### ❌ Common Mistakes

1. **Running commands in wrong directory**
   - ❌ Wrong: `npm install` from repository root
   - ✅ Correct: `cd SMS_V.2.0 && npm install --legacy-peer-deps`

2. **GitHub Actions in wrong location**
   - ❌ Wrong: `.github/workflows/` inside SMS_V.2.0
   - ✅ Correct: `.github/workflows/` in repository root

3. **Creating duplicate src folders**
   - ❌ Wrong: Creating another src folder
   - ✅ Correct: Use existing SMS_V.2.0/src created by Vite

4. **npm dependency conflicts**
   - ❌ Wrong: `npm install` without --legacy-peer-deps
   - ✅ Correct: `npm install --legacy-peer-deps`

5. **Incorrect import paths**
   - ❌ Wrong: `import Button from '../components/Button'`
   - ✅ Correct: `import Button from '@/components/ui/Button'`

### ✅ Solutions

1. **Directory Verification**
   ```bash
   # Always verify your location
   pwd  # Should show: /workspace/SMS_V.2.0
   ls   # Should show: src/, package.json, vite.config.ts
   ```

2. **Path Alias Usage**
   ```typescript
   // ✅ Correct imports
   import { Button } from '@/components/ui/Button'
   import { supabase } from '@/lib/supabase'
   import { useAuth } from '@/contexts/AuthContext'
   ```

3. **Environment Variables**
   ```bash
   # SMS_V.2.0/.env.local
   VITE_SUPABASE_URL=your_supabase_url
   VITE_SUPABASE_ANON_KEY=your_anon_key
   ```

4. **Build Commands**
   ```bash
   # Development
   cd SMS_V.2.0
   npm run dev

   # Build
   cd SMS_V.2.0
   npm run build

   # Deploy
   git add .
   git commit -m "feat: new feature"
   git push origin main
   ```

---

## 📋 Troubleshooting

### npm install errors
```bash
# Clear cache and reinstall
cd SMS_V.2.0
rm -rf node_modules package-lock.json
npm install --legacy-peer-deps
```

### Build errors
```bash
# Check TypeScript errors
cd SMS_V.2.0
npx tsc --noEmit

# Check Vite build
npm run build
```

### GitHub Actions failures
1. Check workflow file location (must be in root .github/workflows/)
2. Verify working-directory: SMS_V.2.0
3. Check GitHub Secrets are set correctly
4. Verify cache-dependency-path: SMS_V.2.0/package-lock.json

### Development server issues
```bash
# Clear Vite cache
cd SMS_V.2.0
rm -rf node_modules/.vite
npm run dev
```

---

## 🎯 Best Practices

1. **Always start with directory check**
   ```bash
   pwd  # Verify you're in SMS_V.2.0
   ```

2. **Use path aliases consistently**
   ```typescript
   // ✅ Good
   import { Button } from '@/components/ui/Button'
   
   // ❌ Avoid
   import { Button } from '../../../components/ui/Button'
   ```

3. **Test builds locally before pushing**
   ```bash
   cd SMS_V.2.0
   npm run build
   ```

4. **Use --legacy-peer-deps for all npm commands**
   ```bash
   npm install --legacy-peer-deps
   npm ci --legacy-peer-deps
   ```

5. **Keep GitHub Actions in repository root**
   - Workflows: `.github/workflows/`
   - Project: `SMS_V.2.0/`

---

## 📚 Additional Resources

- [Vite Documentation](https://vitejs.dev/)
- [Supabase Documentation](https://supabase.com/docs)
- [GitHub Pages Documentation](https://pages.github.com/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [TypeScript Documentation](https://www.typescriptlang.org/docs/)
