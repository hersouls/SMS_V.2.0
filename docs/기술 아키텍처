## 요약

Moonwave 구독관리 시스템 v2.0의 기술 아키텍처 문서를 작성합니다. React + TypeScript + Vite 기반의 정적 SPA와 Supabase BaaS를 활용한 서버리스 아키텍처로 구성되며, GitHub Pages를 통한 자동 배포 파이프라인을 구축합니다.

## 분석

프로젝트 문서들을 통해 파악한 핵심 기술 요소:
- **프론트엔드**: React + TypeScript + Vite + Tailwind CSS
- **백엔드**: Supabase (PostgreSQL + Auth + Storage)
- **배포**: GitHub Actions → GitHub Pages
- **디자인 시스템**: Utility-First CSS, Container Queries, Pretendard 폰트
- **데이터 구조**: 유저별 완전 분리된 구독 관리 시스템

## 실행

# 🏗️ Moonwave 기술 아키텍처 v2.0

## 1. 시스템 개요

### 1.1 아키텍처 다이어그램

```mermaid
graph TB
    subgraph "Client Layer"
        A[React SPA<br/>TypeScript + Vite]
        B[Tailwind CSS<br/>+ Container Queries]
    end
    
    subgraph "Authentication"
        C[Supabase Auth<br/>Email + OAuth]
    end
    
    subgraph "Backend Services"
        D[Supabase Database<br/>PostgreSQL]
        E[Supabase Storage<br/>File Storage]
        F[Supabase Realtime<br/>WebSocket]
    end
    
    subgraph "Deployment"
        G[GitHub Actions<br/>CI/CD Pipeline]
        H[GitHub Pages<br/>Static Hosting]
    end
    
    A --> C
    A --> D
    A --> E
    A --> F
    A --> G
    G --> H
```

### 1.2 핵심 원칙

| 원칙 | 설명 |
|------|------|
| **Serverless First** | 서버 관리 없는 BaaS 활용 |
| **Static Deployment** | 정적 배포로 비용 효율성 극대화 |
| **Type Safety** | TypeScript로 전체 타입 안전성 보장 |
| **Utility-First CSS** | Tailwind CSS로 일관된 디자인 시스템 |
| **User Isolation** | 유저별 데이터 완전 분리 |

---

## 2. 기술 스택

### 2.1 프론트엔드 스택

```typescript
// package.json 핵심 의존성
{
  "dependencies": {
    "react": "^18.2.0",
    "@supabase/supabase-js": "^2.39.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.2.0",
    "@radix-ui/react-icons": "^1.3.0",
    "lucide-react": "^0.303.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@vitejs/plugin-react": "^4.2.1",
    "typescript": "^5.2.2",
    "vite": "^5.0.8",
    "tailwindcss": "^3.3.0",
    "@tailwindcss/container-queries": "^0.1.1"
  }
}
```

### 2.2 백엔드 스택 (Supabase)

| 서비스 | 용도 | 특징 |
|--------|------|------|
| **PostgreSQL** | 메인 데이터베이스 | RLS 정책으로 보안 강화 |
| **Auth** | 인증 서비스 | Email/Password + Google OAuth |
| **Storage** | 파일 저장소 | 서비스 로고/이미지 저장 |
| **Realtime** | 실시간 동기화 | 구독 상태 변경 감지 |
| **Edge Functions** | 서버리스 함수 | 복잡한 비즈니스 로직 (선택) |

---

## 3. 프론트엔드 아키텍처

### 3.1 컴포넌트 구조

```
src/
├── components/
│   ├── ui/                    # 재사용 가능한 UI 컴포넌트
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Input.tsx
│   │   └── Modal.tsx
│   ├── layout/                # 레이아웃 컴포넌트
│   │   ├── Header.tsx
│   │   ├── Footer.tsx
│   │   └── MusicPlayer.tsx
│   └── features/              # 기능별 컴포넌트
│       ├── subscription/
│       │   ├── SubscriptionCard.tsx
│       │   ├── SubscriptionList.tsx
│       │   └── SubscriptionForm.tsx
│       ├── calendar/
│       │   └── PaymentCalendar.tsx
│       └── dashboard/
│           └── DashboardStats.tsx
```

### 3.2 상태 관리 전략

```typescript
// Context API를 활용한 전역 상태 관리
// src/contexts/AppContext.tsx
interface AppState {
  user: User | null;
  subscriptions: Subscription[];
  exchangeRate: ExchangeRate;
  loading: boolean;
}

const AppContext = createContext<AppState | null>(null);

// Custom Hooks를 통한 상태 접근
export const useSubscriptions = () => {
  const context = useContext(AppContext);
  if (!context) throw new Error('useSubscriptions must be used within AppProvider');
  return context.subscriptions;
};
```

### 3.3 라우팅 구조

```typescript
// src/App.tsx
const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
          <Route path="subscriptions" element={<ProtectedRoute><Subscriptions /></ProtectedRoute>} />
          <Route path="calendar" element={<ProtectedRoute><Calendar /></ProtectedRoute>} />
          <Route path="auth" element={<Auth />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
};
```

---

## 4. 백엔드 아키텍처 (Supabase)

### 4.1 데이터베이스 스키마

```sql
-- 유저 테이블 (Supabase Auth 제공)
-- auth.users

-- 구독 테이블
CREATE TABLE subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  service_name TEXT NOT NULL,
  service_url TEXT,
  service_image_url TEXT,
  category TEXT[],
  status TEXT CHECK (status IN ('active', 'paused', 'canceled')),
  amount NUMERIC NOT NULL,
  currency TEXT CHECK (currency IN ('KRW', 'USD')),
  payment_cycle TEXT CHECK (payment_cycle IN ('monthly', 'yearly', 'once')),
  payment_day INTEGER CHECK (payment_day >= 1 AND payment_day <= 31),
  payment_method TEXT,
  start_date DATE,
  end_date DATE,
  auto_renewal BOOLEAN DEFAULT true,
  alarm_days INTEGER[],
  tier TEXT,
  benefits TEXT,
  tags TEXT[],
  memo TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 환율 테이블
CREATE TABLE exchange_rates (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  usd_krw NUMERIC DEFAULT 1300,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 알람 테이블
CREATE TABLE subscription_alarms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  subscription_id UUID REFERENCES subscriptions(id) ON DELETE CASCADE,
  alarm_type TEXT NOT NULL,
  alarm_day INTEGER,
  alarm_time TIME,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 4.2 Row Level Security (RLS)

```sql
-- 구독 테이블 RLS
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can only see their own subscriptions" ON subscriptions
  FOR ALL USING (auth.uid() = user_id);

-- 환율 테이블 RLS
ALTER TABLE exchange_rates ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can only manage their own exchange rate" ON exchange_rates
  FOR ALL USING (auth.uid() = user_id);

-- 알람 테이블 RLS
ALTER TABLE subscription_alarms ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can only manage their own alarms" ON subscription_alarms
  FOR ALL USING (auth.uid() = user_id);
```

### 4.3 Supabase 클라이언트 설정

```typescript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js';
import type { Database } from './database.types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// 타입 안전 헬퍼 함수
export const getSubscriptions = async (userId: string) => {
  const { data, error } = await supabase
    .from('subscriptions')
    .select('*')
    .eq('user_id', userId)
    .order('payment_day', { ascending: true });
    
  if (error) throw error;
  return data;
};
```

---

## 5. 인증 시스템

### 5.1 인증 플로우

```mermaid
sequenceDiagram
    participant User
    participant React App
    participant Supabase Auth
    participant Database
    
    User->>React App: 로그인 시도
    React App->>Supabase Auth: 인증 요청
    Supabase Auth-->>React App: JWT 토큰
    React App->>React App: 토큰 저장
    React App->>Database: 인증된 API 요청
    Database-->>React App: 유저 데이터
    React App-->>User: 대시보드 표시
```

### 5.2 인증 구현

```typescript
// src/hooks/useAuth.ts
export const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // 세션 체크
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // 인증 상태 변경 감지
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setUser(session?.user ?? null);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) throw error;
    return data;
  };

  const signInWithGoogle = async () => {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/dashboard`
      }
    });
    if (error) throw error;
    return data;
  };

  return { user, loading, signIn, signInWithGoogle, signOut };
};
```

---

## 6. 배포 아키텍처

### 6.1 CI/CD 파이프라인

```yaml
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check
        
      - name: Lint
        run: npm run lint
        
      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

### 6.2 환경 설정

```typescript
// vite.config.ts
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), '');
  
  return {
    plugins: [react()],
    resolve: {
      alias: {
        '@': path.resolve(__dirname, './src'),
      },
    },
    base: mode === 'production' ? '/moonwave/' : '/',
    build: {
      outDir: 'dist',
      sourcemap: mode === 'development',
      rollupOptions: {
        output: {
          manualChunks: {
            'react-vendor': ['react', 'react-dom'],
            'supabase-vendor': ['@supabase/supabase-js'],
          },
        },
      },
    },
    server: {
      port: 5173,
      host: true,
    },
  };
});
```

---

## 7. 보안 고려사항

### 7.1 보안 체크리스트

- [ ] **RLS 정책**: 모든 테이블에 Row Level Security 적용
- [ ] **환경 변수**: 민감한 정보는 환경 변수로 관리
- [ ] **HTTPS 전용**: GitHub Pages 기본 HTTPS 지원
- [ ] **CSP 헤더**: Content Security Policy 설정
- [ ] **입력 검증**: 클라이언트/서버 모두에서 검증
- [ ] **SQL Injection 방지**: Prepared statements 사용 (Supabase 기본)
- [ ] **XSS 방지**: React 기본 이스케이핑 활용

### 7.2 보안 구현 예시

```typescript
// src/utils/security.ts
export const sanitizeInput = (input: string): string => {
  return input
    .trim()
    .replace(/[<>]/g, '') // 기본 XSS 방지
    .slice(0, 255); // 길이 제한
};

export const validateUrl = (url: string): boolean => {
  try {
    const parsed = new URL(url);
    return ['http:', 'https:'].includes(parsed.protocol);
  } catch {
    return false;
  }
};
```

---

## 8. 성능 최적화

### 8.1 프론트엔드 최적화

| 기법 | 구현 방법 |
|------|----------|
| **Code Splitting** | React.lazy() + Suspense |
| **Image Optimization** | WebP 포맷 + lazy loading |
| **Bundle Size** | Tree shaking + 청크 분리 |
| **Caching** | Service Worker + Cache-Control |
| **CSS 최적화** | PurgeCSS + Critical CSS |

### 8.2 데이터베이스 최적화

```sql
-- 인덱스 생성
CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX idx_subscriptions_payment_day ON subscriptions(payment_day);
CREATE INDEX idx_alarms_subscription_id ON subscription_alarms(subscription_id);

-- 뷰 생성 (복잡한 쿼리 최적화)
CREATE VIEW user_subscription_summary AS
SELECT 
  u.id as user_id,
  COUNT(s.id) as total_subscriptions,
  SUM(CASE WHEN s.currency = 'KRW' THEN s.amount ELSE 0 END) as total_krw,
  SUM(CASE WHEN s.currency = 'USD' THEN s.amount ELSE 0 END) as total_usd
FROM auth.users u
LEFT JOIN subscriptions s ON u.id = s.user_id
WHERE s.status = 'active'
GROUP BY u.id;
```

---

## 9. 개발 워크플로우

### 9.1 브랜치 전략

```bash
main
├── develop
│   ├── feature/subscription-crud
│   ├── feature/calendar-view
│   └── feature/dashboard-stats
├── hotfix/critical-bug
└── release/v2.0
```

### 9.2 개발 프로세스

1. **이슈 생성**: GitHub Issues에 작업 내용 등록
2. **브랜치 생성**: `feature/이슈번호-기능명`
3. **개발 & 테스트**: 로컬 개발 및 테스트
4. **PR 생성**: develop 브랜치로 Pull Request
5. **코드 리뷰**: 팀원 리뷰 및 승인
6. **머지 & 배포**: develop → main 머지 후 자동 배포

### 9.3 개발 도구 설정

```json
// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "typescript.tsdk": "node_modules/typescript/lib",
  "tailwindCSS.experimental.classRegex": [
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ]
}
```

---

## 10. 모니터링 & 로깅

### 10.1 에러 트래킹

```typescript
// src/utils/errorTracking.ts
export const logError = (error: Error, context?: Record<string, any>) => {
  console.error('Error:', error);
  
  // 프로덕션에서는 외부 서비스로 전송
  if (import.meta.env.PROD) {
    // Sentry, LogRocket 등 활용 가능
    // sendToErrorService(error, context);
  }
};
```

### 10.2 성능 모니터링

```typescript
// src/utils/performance.ts
export const measurePerformance = (metricName: string) => {
  if ('performance' in window) {
    performance.mark(`${metricName}-start`);
    
    return () => {
      performance.mark(`${metricName}-end`);
      performance.measure(
        metricName,
        `${metricName}-start`,
        `${metricName}-end`
      );
      
      const measure = performance.getEntriesByName(metricName)[0];
      console.log(`${metricName}: ${measure.duration}ms`);
    };
  }
  return () => {};
};
```

---

*이 기술 아키텍처는 Moonwave v2.0의 핵심 기술 구조를 정의합니다. 서버리스 아키텍처와 정적 배포를 통해 비용 효율적이면서도 확장 가능한 시스템을 구축합니다.*
