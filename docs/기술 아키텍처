## 요약

Moonwave 구독관리 시스템 v2.0의 기술 아키텍처 문서를 작성합니다. React + TypeScript + Vite 기반의 정적 SPA와 Supabase BaaS를 활용한 서버리스 아키텍처로 구성되며, GitHub Pages를 통한 자동 배포 파이프라인을 구축합니다.

## 분석

프로젝트 문서들을 통해 파악한 핵심 기술 요소:
- **프론트엔드**: React + TypeScript + Vite + Tailwind CSS
- **백엔드**: Supabase (PostgreSQL + Auth + Storage)
- **배포**: GitHub Actions → GitHub Pages
- **디자인 시스템**: Utility-First CSS, Container Queries, Pretendard 폰트
- **데이터 구조**: 유저별 완전 분리된 구독 관리 시스템

## 실행

# 🏗️ Moonwave 기술 아키텍처 v2.0

## ⚠️ CRITICAL WARNINGS - READ FIRST

**⚠️ IMPORTANT: Always cd SMS_V.2.0 before running any commands**
**⚠️ DO NOT create src folder manually - Vite already created it**
**⚠️ GitHub Actions workflows must be in root .github folder**
**⚠️ All development work must happen inside SMS_V.2.0 directory**

---

## 1. 시스템 개요

### 1.1 아키텍처 다이어그램

```mermaid
graph TB
    subgraph "Client Layer"
        A[React SPA<br/>TypeScript + Vite]
        B[Tailwind CSS<br/>+ Container Queries]
    end
    
    subgraph "Authentication"
        C[Supabase Auth<br/>Email + OAuth]
    end
    
    subgraph "Backend Services"
        D[Supabase Database<br/>PostgreSQL]
        E[Supabase Storage<br/>File Storage]
        F[Supabase Realtime<br/>WebSocket]
    end
    
    subgraph "Deployment"
        G[GitHub Actions<br/>CI/CD Pipeline]
        H[GitHub Pages<br/>Static Hosting]
    end
    
    A --> C
    A --> D
    A --> E
    A --> F
    A --> G
    G --> H
```

### 1.2 핵심 원칙

| 원칙 | 설명 |
|------|------|
| **Serverless First** | 서버 관리 없는 BaaS 활용 |
| **Static Deployment** | 정적 배포로 비용 효율성 극대화 |
| **Type Safety** | TypeScript로 전체 타입 안전성 보장 |
| **Utility-First CSS** | Tailwind CSS로 일관된 디자인 시스템 |
| **User Isolation** | 유저별 데이터 완전 분리 |

---

## 2. 기술 스택

### 2.1 프론트엔드 스택

```typescript
// SMS_V.2.0/package.json 핵심 의존성
{
  "dependencies": {
    "react": "^18.2.0",
    "@supabase/supabase-js": "^2.39.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.2.0",
    "@radix-ui/react-icons": "^1.3.0",
    "lucide-react": "^0.303.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@vitejs/plugin-react": "^4.2.1",
    "typescript": "^5.2.2",
    "vite": "^5.0.8",
    "tailwindcss": "^3.3.0",
    "@tailwindcss/container-queries": "^0.1.1"
  }
}
```

### 2.2 백엔드 스택 (Supabase)

| 서비스 | 용도 | 특징 |
|--------|------|------|
| **PostgreSQL** | 메인 데이터베이스 | RLS 정책으로 보안 강화 |
| **Auth** | 인증 서비스 | Email/Password + Google OAuth |
| **Storage** | 파일 저장소 | 서비스 로고/이미지 저장 |
| **Realtime** | 실시간 동기화 | 구독 상태 변경 감지 |
| **Edge Functions** | 서버리스 함수 | 복잡한 비즈니스 로직 (선택) |

---

## 3. 프로젝트 구조

### 3.1 전체 구조

```
Repository Root/
├── .github/
│   └── workflows/
│       ├── deploy.yml          # GitHub Actions (ROOT)
│       ├── ci.yml              # Continuous Integration
│       └── security.yml        # Security scanning
├── docs/                       # Documentation
├── SMS_V.2.0/                  # Main project directory
│   ├── src/                    # Source code (Vite created)
│   │   ├── components/
│   │   │   ├── ui/             # Basic UI components
│   │   │   ├── layout/         # Layout components
│   │   │   └── features/       # Feature-specific components
│   │   ├── contexts/           # React contexts
│   │   ├── hooks/              # Custom hooks
│   │   ├── lib/                # Utility libraries
│   │   ├── pages/              # Page components
│   │   ├── types/              # TypeScript type definitions
│   │   └── utils/              # Utility functions
│   ├── public/                 # Static assets
│   ├── package.json            # Dependencies
│   ├── vite.config.ts          # Vite configuration
│   ├── tailwind.config.js      # Tailwind configuration
│   ├── tsconfig.json           # TypeScript configuration
│   └── .env.local              # Environment variables
└── README.md                   # Project documentation
```

### 3.2 소스 코드 구조

```typescript
// SMS_V.2.0/src/ 디렉토리 구조
src/
├── components/
│   ├── ui/                     # 재사용 가능한 UI 컴포넌트
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   ├── Modal.tsx
│   │   └── index.ts
│   ├── layout/                 # 레이아웃 컴포넌트
│   │   ├── Header.tsx
│   │   ├── Sidebar.tsx
│   │   ├── Footer.tsx
│   │   └── index.ts
│   └── features/               # 기능별 컴포넌트
│       ├── subscription/
│       ├── auth/
│       └── dashboard/
├── contexts/                   # React Context
│   ├── AuthContext.tsx
│   ├── SubscriptionContext.tsx
│   └── index.ts
├── hooks/                      # Custom Hooks
│   ├── useAuth.ts
│   ├── useSubscriptions.ts
│   └── index.ts
├── lib/                        # 라이브러리 설정
│   ├── supabase.ts
│   ├── utils.ts
│   └── constants.ts
├── pages/                      # 페이지 컴포넌트
│   ├── Home.tsx
│   ├── Dashboard.tsx
│   ├── Login.tsx
│   └── index.ts
├── types/                      # TypeScript 타입 정의
│   ├── subscription.ts
│   ├── user.ts
│   └── index.ts
└── utils/                      # 유틸리티 함수
    ├── date.ts
    ├── validation.ts
    └── index.ts
```

---

## 4. 개발 환경 설정

### 4.1 필수 도구

| 도구 | 버전 | 용도 |
|------|------|------|
| **Node.js** | 18+ | JavaScript 런타임 |
| **npm** | 9+ | 패키지 매니저 |
| **Cursor** | 최신 | AI 기반 IDE |
| **Git** | 2.30+ | 버전 관리 |

### 4.2 개발 환경 초기화

```bash
# ⚠️ IMPORTANT: Always start from repository root
cd /workspace

# Clone repository
git clone https://github.com/yourusername/moonwave-v2.git
cd moonwave-v2

# ⚠️ IMPORTANT: Navigate to project directory
cd SMS_V.2.0

# Install dependencies (--legacy-peer-deps for Vite 7 compatibility)
npm install --legacy-peer-deps

# Start development server
npm run dev
```

### 4.3 환경 변수 설정

```bash
# SMS_V.2.0/.env.local
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your_anon_key
VITE_APP_VERSION=2.0.0
VITE_APP_ENV=development
```

---

## 5. 빌드 및 배포

### 5.1 빌드 프로세스

```bash
# ⚠️ IMPORTANT: Make sure you're in SMS_V.2.0 directory
cd SMS_V.2.0

# Development build
npm run dev

# Production build
npm run build

# Preview production build
npm run preview
```

### 5.2 GitHub Actions 배포

```yaml
# .github/workflows/deploy.yml (Repository ROOT)
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: SMS_V.2.0/package-lock.json
    
    - name: Install dependencies
      working-directory: SMS_V.2.0
      run: npm ci --legacy-peer-deps
    
    - name: Build
      working-directory: SMS_V.2.0
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./SMS_V.2.0/dist
```

### 5.3 Vite 설정

```typescript
// SMS_V.2.0/vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  base: '/moonwave-static/', // GitHub Pages base path
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          supabase: ['@supabase/supabase-js']
        }
      }
    }
  },
  server: {
    port: 5173,
    host: true
  }
})
```

---

## 6. 데이터베이스 설계

### 6.1 Supabase 테이블 구조

```sql
-- Users table (managed by Supabase Auth)
-- auth.users (built-in)

-- Subscriptions table
CREATE TABLE subscriptions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  service_name VARCHAR(100) NOT NULL,
  service_url TEXT,
  monthly_fee DECIMAL(10,2) NOT NULL,
  billing_cycle VARCHAR(20) DEFAULT 'monthly',
  next_billing_date DATE NOT NULL,
  status VARCHAR(20) DEFAULT 'active',
  category VARCHAR(50),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Row Level Security (RLS)
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own subscriptions" ON subscriptions
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own subscriptions" ON subscriptions
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own subscriptions" ON subscriptions
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own subscriptions" ON subscriptions
  FOR DELETE USING (auth.uid() = user_id);
```

### 6.2 TypeScript 타입 정의

```typescript
// SMS_V.2.0/src/types/subscription.ts
export interface Subscription {
  id: string
  user_id: string
  service_name: string
  service_url?: string
  monthly_fee: number
  billing_cycle: 'monthly' | 'yearly' | 'quarterly'
  next_billing_date: string
  status: 'active' | 'cancelled' | 'paused'
  category?: string
  notes?: string
  created_at: string
  updated_at: string
}

export interface User {
  id: string
  email: string
  created_at: string
  updated_at: string
}
```

---

## 7. 보안 아키텍처

### 7.1 인증 및 권한

```typescript
// SMS_V.2.0/src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
})
```

### 7.2 Row Level Security (RLS)

```sql
-- 모든 테이블에 RLS 적용
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

-- 사용자는 자신의 데이터만 접근 가능
CREATE POLICY "Users can only access their own data" ON subscriptions
  FOR ALL USING (auth.uid() = user_id);
```

---

## 8. 성능 최적화

### 8.1 코드 분할

```typescript
// SMS_V.2.0/src/App.tsx
import { lazy, Suspense } from 'react'

// Lazy loading for pages
const Dashboard = lazy(() => import('@/pages/Dashboard'))
const SubscriptionList = lazy(() => import('@/pages/SubscriptionList'))

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Dashboard />
    </Suspense>
  )
}
```

### 8.2 이미지 최적화

```typescript
// SMS_V.2.0/src/components/ui/Image.tsx
import { useState } from 'react'

interface ImageProps {
  src: string
  alt: string
  className?: string
}

export function Image({ src, alt, className }: ImageProps) {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(false)

  return (
    <div className={`relative ${className}`}>
      {loading && (
        <div className="absolute inset-0 bg-gray-200 animate-pulse" />
      )}
      <img
        src={src}
        alt={alt}
        className={`w-full h-full object-cover ${
          loading ? 'opacity-0' : 'opacity-100'
        }`}
        onLoad={() => setLoading(false)}
        onError={() => setError(true)}
      />
    </div>
  )
}
```

---

## 🔧 Common Mistakes and Solutions

### ❌ Common Mistakes

1. **Creating duplicate src folders**
   - ❌ Wrong: Creating another src folder inside SMS_V.2.0
   - ✅ Correct: Use existing SMS_V.2.0/src folder created by Vite

2. **Running commands in wrong directory**
   - ❌ Wrong: Running npm commands from repository root
   - ✅ Correct: Always `cd SMS_V.2.0` first

3. **GitHub Actions in wrong location**
   - ❌ Wrong: Placing workflows in SMS_V.2.0/.github/
   - ✅ Correct: Place in root .github/workflows/

4. **npm dependency conflicts**
   - ❌ Wrong: Using `npm install` without --legacy-peer-deps
   - ✅ Correct: Use `npm install --legacy-peer-deps`

5. **Incorrect file paths in imports**
   - ❌ Wrong: `import Button from '../components/Button'`
   - ✅ Correct: `import Button from '@/components/ui/Button'`

### ✅ Solutions

1. **Directory Structure Verification**
   ```bash
   # Always verify you're in the right directory
   pwd  # Should show: /workspace/SMS_V.2.0
   ls   # Should show: src/, package.json, vite.config.ts, etc.
   ```

2. **Path Alias Configuration**
   ```typescript
   // SMS_V.2.0/tsconfig.app.json
   {
     "compilerOptions": {
       "paths": {
         "@/*": ["./src/*"]
       }
     }
   }
   ```

3. **GitHub Actions Directory Structure**
   ```
   Repository Root/
   ├── .github/
   │   └── workflows/
   │       ├── deploy.yml
   │       └── ci.yml
   └── SMS_V.2.0/
       ├── src/
       ├── package.json
       └── vite.config.ts
   ```

4. **Environment Variables**
   ```bash
   # SMS_V.2.0/.env.local (for development)
   VITE_SUPABASE_URL=your_supabase_url
   VITE_SUPABASE_ANON_KEY=your_anon_key
   ```

5. **Build and Deploy Commands**
   ```bash
   # Development
   cd SMS_V.2.0
   npm run dev

   # Build
   cd SMS_V.2.0
   npm run build

   # Deploy (GitHub Actions handles this automatically)
   git add .
   git commit -m "feat: new feature"
   git push origin main
   ```

---

## 📋 Verification Checklist

Before starting any development session:

- [ ] Verify you are in SMS_V.2.0 directory: `pwd`
- [ ] Check that src folder exists: `ls src/`
- [ ] Verify package.json exists: `ls package.json`
- [ ] Confirm GitHub Actions are in root .github folder
- [ ] Test npm install with --legacy-peer-deps
- [ ] Verify @ alias works in imports
- [ ] Check that vite.config.ts has correct base path

---

## 🚀 Quick Start Commands

```bash
# Clone repository
git clone https://github.com/yourusername/moonwave-v2.git
cd moonwave-v2

# Navigate to project directory
cd SMS_V.2.0

# Install dependencies
npm install --legacy-peer-deps

# Start development server
npm run dev

# Build for production
npm run build

# Deploy (automatic via GitHub Actions)
git add .
git commit -m "feat: new feature"
git push origin main
```
