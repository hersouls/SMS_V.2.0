## 요약
Moonwave v2.0 개발 작업을 Cursor AI 중심 워크플로우로 재구성합니다. 문유는 브라우저 기반 설정과 전략 결정을, Cursor는 모든 코드 생성과 터미널 명령 실행을 담당합니다.

## 분석
작업 분담 재정의:
- **문유**: 브라우저 작업(GitHub, Supabase 대시보드), 전략 결정, 디자인 선택, 테스트
- **Cursor**: 모든 코드 작성, 터미널 명령 실행, 파일 생성, 자동화

## 실행

# 🤖 Moonwave v2.0 Cursor AI 중심 개발 체크리스트

## Phase 1: 기반 구축 (1-2주)

### 1.1 프로젝트 초기화

#### 👤 문유가 브라우저에서 할 일
- [ ] GitHub.com에서 새 Repository 생성
  - Repository name: `moonwave-v2`
  - Public repository 선택
  - README, .gitignore, License 추가하지 않음
- [ ] Repository URL 복사해두기

#### 🤖 Cursor에서 실행할 명령어와 작업
- [x] ```bash
# Cursor 터미널에서 실행
npm create vite@latest SMS_V.2.0 -- --template react-ts
cd SMS_V.2.0
git init
```

- [x] **Cursor 프롬프트 1**: 
```
"Create a comprehensive .gitignore for React TypeScript Vite project with Supabase, including .env.local, dist, and common IDE files"
```

- [x] **Cursor 프롬프트 2**:
```
"Set up git remote with URL: https://github.com/hersouls/SMS_V.2.0.git and make initial commit"
```

### 1.2 개발 환경 설정

#### 👤 문유가 할 일
- [ ] Cursor Settings에서 Tailwind CSS 자동완성 활성화 확인
- [ ] 프로젝트 디자인 시스템 문서 참조 준비

#### 🤖 Cursor에서 실행할 작업

- [x] **터미널 명령어 블록** (복사하여 한번에 실행):
```bash
# 필수 패키지 설치
npm install -D tailwindcss postcss autoprefixer @tailwindcss/container-queries
npm install -D @types/react @types/react-dom
npm install clsx tailwind-merge
npm install @radix-ui/react-icons lucide-react @heroicons/react
npm install @supabase/supabase-js
npm install react-router-dom

# Tailwind 초기화
tailwindcss init -p
```

- [x] **Cursor 프롬프트 3**:
```
"Configure tailwind.config.js with:
1. Pretendard font family
2. Container queries plugin
3. Moonwave color system (primary blue-purple gradient)
4. Korean typography utilities
5. Custom spacing and shadow tokens from the design guide"
```

- [x] **Cursor 프롬프트 4**:
```
"Create src/index.css with Tailwind directives, Pretendard font import, and Korean text optimization utilities (break-keep-ko, tracking-ko)"
```

### 1.3 프로젝트 구조 생성

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 5**:
```
"Create the following folder structure with index.ts files for exports:
src/
├── components/
│   ├── ui/
│   ├── layout/
│   └── features/
├── contexts/
├── hooks/
├── lib/
├── pages/
├── types/
└── utils/"
```

- [x] **Cursor 프롬프트 6**:
```
"Create src/lib/utils.ts with cn function using clsx and tailwind-merge for className combination"
```

### 1.4 Supabase 설정 ✅ 완료

#### 👤 문유가 브라우저에서 할 일

1. **Supabase 프로젝트 생성**
   - [x] [app.supabase.com](https://app.supabase.com) 접속
   - [x] "New Project" 클릭
   - [x] Organization 선택 또는 생성
   - [x] Project 정보 입력:
     - Name: `moonwave-v2`
     - Database Password: 생성 후 안전한 곳에 저장
     - Region: `Northeast Asia (Seoul)`
   - [x] "Create Project" 클릭

2. **API 키 복사**
   - [x] Settings → API 이동
   - [x] Project URL 복사
   - [x] anon public key 복사

3. **Authentication 설정**
   - [x] Authentication → Providers → Email 활성화
   - [x] Authentication → Providers → Google 설정
     - [x] Google Cloud Console에서 OAuth 2.0 Client ID 생성
     - [x] Authorized redirect URIs 추가
     - [x] Client ID와 Secret 입력

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 7**:
```
"Create .env.local file with:
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
and add .env.local to .gitignore"
```

- [x] **Cursor 프롬프트 8**:
```
"Create src/lib/supabase.ts with typed Supabase client initialization using environment variables"
```

### 1.5 데이터베이스 테이블 생성 ✅ 완료

#### 👤 문유가 Supabase SQL Editor에서 할 일
- [x] SQL Editor 열기
- [x] 아래 SQL 복사하여 실행

#### 🤖 Cursor에서 SQL 생성

- [x] **Cursor 프롬프트 9**:
```
"Create SQL schema for SMS v2.0 based on the ERD:
1. subscriptions table with user_id, service_name, amount, currency, payment_cycle, etc.
2. exchange_rates table with user_id and usd_krw rate
3. subscription_alarms table
Include RLS policies for user data isolation"
```

✅ SQL 스키마가 `database_schema.sql` 파일로 생성됨. 문유가 Supabase SQL Editor에 붙여넣고 실행 완료

### 1.6 타입 정의

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 10**:
```
"Generate TypeScript types for Supabase database tables:
1. Create src/types/database.types.ts
2. Define interfaces for Subscription, ExchangeRate, SubscriptionAlarm
3. Include Supabase response types"
```

### 1.7 기본 UI 컴포넌트

#### 🤖 Cursor에서 컴포넌트 생성

- [x] **Cursor 프롬프트 11 (Button)**:
```
"Create src/components/ui/Button.tsx:
- React forwardRef component with TypeScript
- Variants: primary, secondary, destructive, ghost, gradient
- Sizes: sm, md, lg, icon
- Loading state with spinner
- Using cn utility for className merge
- Pretendard font and Korean text optimization"
```

- [x] **Cursor 프롬프트 12 (Card)**:
```
"Create src/components/ui/Card.tsx with:
- Card, CardHeader, CardTitle, CardContent components
- Glass morphism option
- Container queries support
- Hover effects
- TypeScript interfaces"
```

- [x] **Cursor 프롬프트 13 (Input)**:
```
"Create src/components/ui/Input.tsx:
- ForwardRef with TypeScript
- Label and error message support
- Icon support (left side)
- Focus states with ring
- Pretendard font"
```

### 1.8 라우팅 설정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 14**:
```
"Create src/App.tsx with React Router setup:
- Routes: /, /login, /signup, /dashboard, /subscriptions, /calendar, /settings
- Protected routes wrapper
- Layout component integration"
```

- [x] **Cursor 프롬프트 15**:
```
"Create src/contexts/AuthContext.tsx:
- Supabase auth state management
- useAuth hook
- Login, signup, logout functions
- Session persistence"
```

### 1.9 레이아웃 컴포넌트 ✅ 완료

#### 👤 문유가 할 일
- [x] 헤더 디자인 확인 (Wave 효과 포함 여부)
- [x] 푸터에 들어갈 소셜 링크 결정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 16**:
```
"Create src/components/layout/Header.tsx based on the design guide:
- Fixed header with wave SVG background
- Glass morphism buttons
- Home, notification, profile icons only (no text)
- Mobile responsive"
```

- [x] **Cursor 프롬프트 17**:
```
"Create src/components/layout/Footer.tsx:
- Social links with Lucide icons
- Copyright text
- Container queries for responsive layout"
```

### 1.10 인증 페이지

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 18**:
```
"Create src/pages/auth/Login.tsx:
- Email/password inputs with icons
- Show/hide password toggle
- Google OAuth button
- Glass morphism card on gradient background
- Link to signup page
- Supabase auth integration"
```

- [x] **Cursor 프롬프트 19**:
```
"Create src/pages/auth/Signup.tsx:
- Similar to login but with password confirmation
- Form validation
- Success redirect to dashboard"
```

---

## Phase 2: 핵심 기능 구현 (2-3주) ✅ 완료

### 2.1 홈/대시보드 페이지 ✅ 완료

#### 👤 문유가 할 일
- [x] 대시보드에 표시할 통계 항목 확정
- [x] 환율 기본값 결정 (예: 1,300원)

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 20**:
```
"Create src/pages/Dashboard.tsx with:
- Stats cards (total subscriptions, monthly cost, average, active count)
- Exchange rate display with click to edit
- Active subscriptions list (top 5)
- Mini calendar view
- Fetch data from Supabase"
```

- [x] **Cursor 프롬프트 21**:
```
"Create src/components/features/dashboard/StatsCard.tsx:
- Icon, title, value, change indicator
- Number formatting for KRW/USD
- Animated number transitions"
```

### 2.2 구독 CRUD 기능 ✅ 완료

#### 👤 문유가 할 일
- [x] 구독 카테고리 목록 확정
- [x] 결제 수단 옵션 확정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 22**:
```
"Create src/hooks/useSubscriptions.ts:
- Fetch user subscriptions
- Add, update, delete functions
- Real-time subscription with Supabase
- Error handling
- Loading states"
```

- [x] **Cursor 프롬프트 23**:
```
"Create src/components/features/subscription/SubscriptionCard.tsx:
- Service image/logo display
- Click image to open service URL
- Status badge (active/paused/canceled)
- Payment info display
- Click card for details"
```

- [x] **Cursor 프롬프트 24**:
```
"Create src/components/features/subscription/SubscriptionForm.tsx:
- Modal form for add/edit
- Image upload to Supabase Storage
- All fields from the ERD
- Form validation
- Currency selection (KRW/USD)"
```

### 2.3 Supabase Storage 설정 ✅ 완료

#### 👤 문유가 브라우저에서 할 일
- [x] Supabase Dashboard → Storage
- [x] New bucket 생성: `service-logos`
- [x] Public bucket으로 설정
- [x] RLS 정책 추가 (authenticated users can upload)

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 25**:
```
"Create src/utils/storage.ts:
- Upload image to Supabase Storage
- Generate public URL
- File size and type validation
- Error handling"
```

### 2.4 구독 목록 페이지 ✅ 완료

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 26**:
```
"Create src/pages/Subscriptions.tsx:
- Grid/list view toggle
- Search functionality
- Category filter
- Status filter (active/paused/canceled)
- Sort options
- Floating action button for add"
```

### 2.5 Music Player Footer ✅ 완료

#### 👤 문유가 할 일
- [x] 배경 음악 파일 준비 (MP3)
- [x] 음악 파일을 public/audio/ 폴더에 추가

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 27**:
```
"Create src/components/layout/MusicPlayer.tsx:
- Fixed bottom player
- Play/pause, next, previous controls
- Volume control
- Playlist (Glow Not Noise, etc.)
- Auto-play when logged in
- Minimize/expand states"
```

---

## Phase 3: 고급 기능 (2주)

### 3.1 결제 캘린더

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 28**:
```
"Create src/pages/Calendar.tsx:
- Monthly calendar view
- Payment dates marked with service icons
- Hover to show payment details
- Navigation between months
- Today and upcoming payments highlight"
```

**Cursor 프롬프트 29**:
```
"Create src/utils/calendar.ts:
- Get payment dates for a month
- Calculate next payment dates
- Group subscriptions by date"
```

### 3.2 환율 관리

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 30**:
```
"Create src/components/features/ExchangeRateModal.tsx:
- Modal to edit exchange rate
- Current rate display
- Input validation
- Save to Supabase
- Real-time update across app"
```

### 3.3 설정 페이지

#### 👤 문유가 할 일
- [ ] 알림 카테고리 확정
- [ ] 계정 삭제 정책 결정

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 31**:
```
"Create src/pages/Settings.tsx:
- Profile section (email, join date)
- Exchange rate settings
- Notification preferences
- Logout button
- Account deletion option"
```

---

## Phase 4: 배포 및 최적화 (1주)

### 4.1 GitHub Actions 설정

#### 👤 문유가 브라우저에서 할 일
- [ ] GitHub Repository → Settings → Secrets
- [ ] Add secret: `VITE_SUPABASE_URL`
- [ ] Add secret: `VITE_SUPABASE_ANON_KEY`
- [ ] Settings → Pages → Source: GitHub Actions

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 32**:
```
"Create .github/workflows/deploy.yml:
- Trigger on push to main
- Node.js 20 setup
- Build with secrets
- Deploy to GitHub Pages
- Include CNAME file creation"
```

### 4.2 성능 최적화

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 33**:
```
"Update vite.config.ts:
- Manual chunks for vendor splitting
- Build optimization
- Source maps for development only
- Base URL for GitHub Pages"
```

### 4.3 PWA 설정 (선택)

#### 👤 문유가 할 일
- [ ] App 아이콘 준비 (512x512, 192x192)
- [ ] App 이름 및 설명 결정

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 34**:
```
"Add PWA support:
- Install vite-plugin-pwa
- Create manifest.json
- Service worker registration
- Offline functionality"
```

### 4.4 최종 테스트 및 배포

#### 👤 문유가 브라우저에서 할 일
- [ ] 로컬 빌드 테스트
- [ ] 모든 기능 수동 테스트
- [ ] 반응형 디자인 확인
- [ ] GitHub Actions 실행 확인
- [ ] 배포된 사이트 접속 테스트

#### 🤖 Cursor에서 실행할 작업

**터미널에서 실행**:
```bash
# 로컬 빌드 테스트
npm run build
npm run preview

# 최종 커밋 및 푸시
git add .
git commit -m "feat: complete v2.0 development"
git push origin main
```

---

## 🎯 일일 작업 플로우

### 아침 시작 루틴
1. **문유**: Supabase Dashboard 확인
2. **Cursor**: `git pull` 실행
3. **Cursor**: `npm run dev` 시작

### 기능 개발 플로우
1. **문유**: 기능 요구사항 정의
2. **Cursor**: 컴포넌트/훅 생성 (프롬프트 사용)
3. **문유**: 브라우저에서 테스트
4. **Cursor**: 버그 수정 및 개선

### 일일 마무리
1. **Cursor**: 
   ```bash
   git add .
   git commit -m "feat/fix/refactor: 작업 내용"
   git push origin main
   ```
2. **문유**: GitHub Actions 확인
3. **문유**: 배포 사이트 확인

---

## 📝 Cursor 프롬프트 팁

### 효과적인 프롬프트 구조
```
"Create [파일경로]:
- [기술 스택 명시]
- [주요 기능 나열]
- [디자인 시스템 참조]
- [타입 안전성 요구]
- [에러 처리 포함]"
```

### 리팩토링 요청
```
"Refactor [파일명] to:
- Improve performance using [기법]
- Add proper TypeScript types
- Include error boundaries
- Add loading states"
```

---

*이 체크리스트는 Cursor AI의 강력한 코드 생성 능력을 최대한 활용하면서, 문유가 전략적 결정에 집중할 수 있도록 설계되었습니다.*
