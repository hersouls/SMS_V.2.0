## 요약
Moonwave v2.0 개발 작업을 Cursor AI 중심 워크플로우로 재구성합니다. 문유는 브라우저 기반 설정과 전략 결정을, Cursor는 모든 코드 생성과 터미널 명령 실행을 담당합니다.

## 분석
작업 분담 재정의:
- **문유**: 브라우저 작업(GitHub, Supabase 대시보드), 전략 결정, 디자인 선택, 테스트
- **Cursor**: 모든 코드 작성, 터미널 명령 실행, 파일 생성, 자동화

## 실행

# 🤖 Moonwave v2.0 Cursor AI 중심 개발 체크리스트

## ⚠️ CRITICAL WARNINGS - READ FIRST

**⚠️ IMPORTANT: Always cd SMS_V.2.0 before running any commands**
**⚠️ DO NOT create src folder manually - Vite already created it**
**⚠️ GitHub Actions workflows must be in root .github folder**
**⚠️ All development work must happen inside SMS_V.2.0 directory**

## Phase 1: 기반 구축 (1-2주) ✅ 완료

### 1.1 프로젝트 초기화 ✅ 완료

#### 👤 문유가 브라우저에서 할 일
- [x] GitHub.com에서 새 Repository 생성
  - Repository name: `moonwave-v2`
  - Public repository 선택
  - README, .gitignore, License 추가하지 않음
- [x] Repository URL 복사해두기

#### 🤖 Cursor에서 실행할 명령어와 작업
- [x] ```bash
# Cursor 터미널에서 실행
npm create vite@latest SMS_V.2.0 -- --template react-ts
cd SMS_V.2.0
git init
```

- [x] **Cursor 프롬프트 1**: 
```
"Create a comprehensive .gitignore for React TypeScript Vite project with Supabase, including .env.local, dist, and common IDE files"
```

- [x] **Cursor 프롬프트 2**:
```
"Set up git remote with URL: https://github.com/hersouls/SMS_V.2.0.git and make initial commit"
```

### 1.2 개발 환경 설정

#### 👤 문유가 할 일
- [ ] Cursor Settings에서 Tailwind CSS 자동완성 활성화 확인
- [ ] 프로젝트 디자인 시스템 문서 참조 준비

#### 🤖 Cursor에서 실행할 작업

- [x] **터미널 명령어 블록** (복사하여 한번에 실행):
```bash
# ⚠️ IMPORTANT: Make sure you are in SMS_V.2.0 directory
cd SMS_V.2.0

# 필수 패키지 설치 (--legacy-peer-deps for Vite 7 compatibility)
npm install --legacy-peer-deps -D tailwindcss postcss autoprefixer @tailwindcss/container-queries
npm install --legacy-peer-deps -D @types/react @types/react-dom
npm install --legacy-peer-deps clsx tailwind-merge
npm install --legacy-peer-deps @radix-ui/react-icons lucide-react @heroicons/react
npm install --legacy-peer-deps @supabase/supabase-js
npm install --legacy-peer-deps react-router-dom

# Tailwind 초기화
tailwindcss init -p
```

- [x] **Cursor 프롬프트 3**:
```
"Configure tailwind.config.js with:
1. Pretendard font family
2. Container queries plugin
3. Moonwave color system (primary blue-purple gradient)
4. Korean typography utilities
5. Custom spacing and shadow tokens from the design guide"
```

- [x] **Cursor 프롬프트 4**:
```
"Create SMS_V.2.0/src/index.css with Tailwind directives, Pretendard font import, and Korean text optimization utilities (break-keep-ko, tracking-ko)"
```

### 1.3 프로젝트 구조 생성

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 5**:
```
"Create the following folder structure with index.ts files for exports in SMS_V.2.0/src/:
src/
├── components/
│   ├── ui/
│   ├── layout/
│   └── features/
├── contexts/
├── hooks/
├── lib/
├── pages/
├── types/
└── utils/"
```

- [x] **Cursor 프롬프트 6**:
```
"Create SMS_V.2.0/src/lib/utils.ts with cn utility function using clsx and tailwind-merge for className merging"
```

### 1.4 Supabase 설정 ✅ 완료

#### 👤 문유가 브라우저에서 할 일

1. **Supabase 프로젝트 생성**
   - [x] [app.supabase.com](https://app.supabase.com) 접속
   - [x] "New Project" 클릭
   - [x] Organization 선택 또는 생성
   - [x] Project 정보 입력:
     - Name: `moonwave-v2`
     - Database Password: 생성 후 안전한 곳에 저장
     - Region: `Northeast Asia (Seoul)`
   - [x] "Create Project" 클릭

2. **API 키 복사**
   - [x] Settings → API 이동
   - [x] Project URL 복사
   - [x] anon public key 복사

3. **Authentication 설정**
   - [x] Authentication → Providers → Email 활성화
   - [x] Authentication → Providers → Google 설정
     - [x] Google Cloud Console에서 OAuth 2.0 Client ID 생성
     - [x] Authorized redirect URIs 추가
     - [x] Client ID와 Secret 입력

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 7**:
```
"Create .env.local file with:
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
and add .env.local to .gitignore"
```

- [x] **Cursor 프롬프트 8**:
```
"Create src/lib/supabase.ts with typed Supabase client initialization using environment variables"
```

### 1.5 데이터베이스 테이블 생성 ✅ 완료

#### 👤 문유가 Supabase SQL Editor에서 할 일
- [x] SQL Editor 열기
- [x] 아래 SQL 복사하여 실행

#### 🤖 Cursor에서 SQL 생성

- [x] **Cursor 프롬프트 9**:
```
"Create SQL schema for SMS v2.0 based on the ERD:
1. subscriptions table with user_id, service_name, amount, currency, payment_cycle, etc.
2. exchange_rates table with user_id and usd_krw rate
3. subscription_alarms table
Include RLS policies for user data isolation"
```

✅ SQL 스키마가 `database_schema.sql` 파일로 생성됨. 문유가 Supabase SQL Editor에 붙여넣고 실행 완료

### 1.6 타입 정의

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 10**:
```
"Generate TypeScript types for Supabase database tables:
1. Create src/types/database.types.ts
2. Define interfaces for Subscription, ExchangeRate, SubscriptionAlarm
3. Include Supabase response types"
```

### 1.7 기본 UI 컴포넌트

#### 🤖 Cursor에서 컴포넌트 생성

- [x] **Cursor 프롬프트 11 (Button)**:
```
"Create src/components/ui/Button.tsx:
- React forwardRef component with TypeScript
- Variants: primary, secondary, destructive, ghost, gradient
- Sizes: sm, md, lg, icon
- Loading state with spinner
- Using cn utility for className merge
- Pretendard font and Korean text optimization"
```

- [x] **Cursor 프롬프트 12 (Card)**:
```
"Create src/components/ui/Card.tsx with:
- Card, CardHeader, CardTitle, CardContent components
- Glass morphism option
- Container queries support
- Hover effects
- TypeScript interfaces"
```

- [x] **Cursor 프롬프트 13 (Input)**:
```
"Create src/components/ui/Input.tsx:
- ForwardRef with TypeScript
- Label and error message support
- Icon support (left side)
- Focus states with ring
- Pretendard font"
```

### 1.8 라우팅 설정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 14**:
```
"Create src/App.tsx with React Router setup:
- Routes: /, /login, /signup, /dashboard, /subscriptions, /calendar, /settings
- Protected routes wrapper
- Layout component integration"
```

- [x] **Cursor 프롬프트 15**:
```
"Create src/contexts/AuthContext.tsx:
- Supabase auth state management
- useAuth hook
- Login, signup, logout functions
- Session persistence"
```

### 1.9 레이아웃 컴포넌트 ✅ 완료

#### 👤 문유가 할 일
- [x] 헤더 디자인 확인 (Wave 효과 포함 여부)
- [x] 푸터에 들어갈 소셜 링크 결정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 16**:
```
"Create src/components/layout/Header.tsx based on the design guide:
- Fixed header with wave SVG background
- Glass morphism buttons
- Home, notification, profile icons only (no text)
- Mobile responsive"
```

- [x] **Cursor 프롬프트 17**:
```
"Create src/components/layout/Footer.tsx:
- Social links with Lucide icons
- Copyright text
- Container queries for responsive layout"
```

### 1.10 인증 페이지

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 18**:
```
"Create src/pages/auth/Login.tsx:
- Email/password inputs with icons
- Show/hide password toggle
- Google OAuth button
- Glass morphism card on gradient background
- Link to signup page
- Supabase auth integration"
```

- [x] **Cursor 프롬프트 19**:
```
"Create src/pages/auth/Signup.tsx:
- Similar to login but with password confirmation
- Form validation
- Success redirect to dashboard"
```

---

## Phase 2: 핵심 기능 구현 (2-3주) ✅ 완료

### 2.1 홈/대시보드 페이지 ✅ 완료

#### 👤 문유가 할 일
- [x] 대시보드에 표시할 통계 항목 확정
- [x] 환율 기본값 결정 (예: 1,300원)

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 20**:
```
"Create src/pages/Dashboard.tsx with:
- Stats cards (total subscriptions, monthly cost, average, active count)
- Exchange rate display with click to edit
- Active subscriptions list (top 5)
- Mini calendar view
- Fetch data from Supabase"
```

- [x] **Cursor 프롬프트 21**:
```
"Create src/components/features/dashboard/StatsCard.tsx:
- Icon, title, value, change indicator
- Number formatting for KRW/USD
- Animated number transitions"
```

### 2.2 구독 CRUD 기능 ✅ 완료

#### 👤 문유가 할 일
- [x] 구독 카테고리 목록 확정
- [x] 결제 수단 옵션 확정

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 22**:
```
"Create src/hooks/useSubscriptions.ts:
- Fetch user subscriptions
- Add, update, delete functions
- Real-time subscription with Supabase
- Error handling
- Loading states"
```

- [x] **Cursor 프롬프트 23**:
```
"Create src/components/features/subscription/SubscriptionCard.tsx:
- Service image/logo display
- Click image to open service URL
- Status badge (active/paused/canceled)
- Payment info display
- Click card for details"
```

- [x] **Cursor 프롬프트 24**:
```
"Create src/components/features/subscription/SubscriptionForm.tsx:
- Modal form for add/edit
- Image upload to Supabase Storage
- All fields from the ERD
- Form validation
- Currency selection (KRW/USD)"
```

### 2.3 Supabase Storage 설정 ✅ 완료

#### 👤 문유가 브라우저에서 할 일
- [x] Supabase Dashboard → Storage
- [x] New bucket 생성: `service-logos`
- [x] Public bucket으로 설정
- [x] RLS 정책 추가 (authenticated users can upload)

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 25**:
```
"Create src/utils/storage.ts:
- Upload image to Supabase Storage
- Generate public URL
- File size and type validation
- Error handling"
```

### 2.4 구독 목록 페이지 ✅ 완료

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 26**:
```
"Create src/pages/Subscriptions.tsx:
- Grid/list view toggle
- Search functionality
- Category filter
- Status filter (active/paused/canceled)
- Sort options
- Floating action button for add"
```

### 2.5 Music Player Footer ✅ 완료

#### 👤 문유가 할 일
- [x] 배경 음악 파일 준비 (MP3)
- [x] 음악 파일을 public/audio/ 폴더에 추가

#### 🤖 Cursor에서 실행할 작업

- [x] **Cursor 프롬프트 27**:
```
"Create src/components/layout/MusicPlayer.tsx:
- Fixed bottom player
- Play/pause, next, previous controls
- Volume control
- Playlist (Glow Not Noise, etc.)
- Auto-play when logged in
- Minimize/expand states"
```

---

## Phase 3: 고급 기능 개발 (2주)

### 3.1 결제 캘린더 (Payment Calendar)

#### 👤 문유가 할 일
- [ ] 캘린더 뷰 스타일 확정 (월간/주간/일간)
- [ ] 결제일 표시 아이콘 디자인 결정
- [ ] 캘린더 네비게이션 방식 결정

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 28**:
```
"Create src/pages/Calendar.tsx based on 화면정의서 IDCAL-001:
- Monthly calendar view with Tailwind UI premium components
- Payment dates marked with service icons (Netflix, Spotify, etc.)
- Hover to show payment details (service name, amount, currency)
- Navigation between months with arrow buttons
- Today and upcoming payments highlight with different colors
- Right sidebar showing today's payments and weekly summary
- Container queries for responsive design
- Pretendard font and Korean text optimization
- Glass morphism design elements from Footer 디자인가이드"
```

**Cursor 프롬프트 29**:
```
"Create src/utils/calendar.ts:
- Get payment dates for a month with subscription data
- Calculate next payment dates based on billing cycle
- Group subscriptions by date for calendar display
- Handle different currencies (KRW/USD) with exchange rates
- Generate calendar grid with proper date calculations
- TypeScript interfaces for calendar events and payment data"
```

**Cursor 프롬프트 30**:
```
"Create src/components/features/calendar/CalendarGrid.tsx:
- Monthly grid layout with Tailwind UI table patterns
- Service icons for each payment date
- Hover effects showing payment details
- Today and upcoming payment highlighting
- Responsive design with container queries
- Accessibility features (ARIA labels, keyboard navigation)"
```

### 3.2 환율 관리 (Exchange Rate Management)

#### 👤 문유가 할 일
- [ ] 환율 업데이트 주기 결정 (수동/자동)
- [ ] 실시간 환율 API 서비스 선택
- [ ] 환율 변경 알림 설정 여부

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 31**:
```
"Create src/components/features/ExchangeRateModal.tsx based on 화면정의서:
- Modal with Tailwind UI premium modal pattern
- Current rate display with real-time API integration
- Input validation for exchange rate (positive numbers only)
- Save to Supabase with user-specific rates
- Real-time update across app using context
- Glass morphism design from 디자인가이드
- Pretendard font and Korean text optimization
- Error handling and loading states"
```

**Cursor 프롬프트 32**:
```
"Create src/hooks/useExchangeRate.ts:
- Fetch and manage exchange rates from Supabase
- Real-time subscription for rate changes
- Default rate fallback (1,300 KRW)
- Currency conversion utilities
- Error handling and retry logic
- TypeScript interfaces for exchange rate data"
```

**Cursor 프롬프트 33**:
```
"Create src/components/features/ExchangeRateDisplay.tsx:
- Clickable exchange rate display on dashboard
- Shows current rate and last update time
- Hover effects and click to edit
- Responsive design with container queries
- Accessibility features (ARIA labels, keyboard support)
- Glass morphism styling from 디자인가이드"
```

### 3.3 설정 페이지 (Settings Page)

#### 👤 문유가 할 일
- [ ] 알림 카테고리 확정 (결제 예정, 가격 변동, 구독 만료)
- [ ] 계정 삭제 정책 결정 (데이터 보존 기간)
- [ ] 프로필 정보 표시 항목 확정

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 34**:
```
"Create src/pages/Settings.tsx based on 화면정의서 IDSET-001:
- Profile section with email and join date display
- Exchange rate settings with modal integration
- Notification preferences with toggle switches
- Logout button with confirmation
- Account deletion option with warning modal
- Tailwind UI premium components (forms, toggles, buttons)
- Glass morphism design elements
- Pretendard font and Korean text optimization
- Container queries for responsive layout"
```

**Cursor 프롬프트 35**:
```
"Create src/components/features/settings/NotificationSettings.tsx:
- Toggle switches for different notification types
- Real-time save to Supabase
- Visual feedback for changes
- Accessibility features (ARIA labels, keyboard navigation)
- Tailwind UI toggle component patterns
- Korean text optimization with Pretendard font"
```

**Cursor 프롬프트 36**:
```
"Create src/components/features/settings/AccountDeletionModal.tsx:
- Warning modal for account deletion
- Confirmation steps and data explanation
- Integration with Supabase auth deletion
- Tailwind UI modal patterns with Headless UI
- Glass morphism styling
- Accessibility features and keyboard navigation"
```

### 3.4 고급 알림 시스템 (Advanced Notification System)

#### 👤 문유가 할 일
- [ ] 알림 채널 확정 (브라우저, 이메일, 푸시)
- [ ] 알림 템플릿 디자인 확정
- [ ] 알림 우선순위 설정 규칙

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 37**:
```
"Create src/components/features/notifications/NotificationCenter.tsx:
- Notification dropdown with Tailwind UI menu patterns
- Real-time notifications from Supabase
- Mark as read functionality
- Notification categories (payment, price change, expiry)
- Glass morphism design from 디자인가이드
- Container queries for responsive layout
- Accessibility features (ARIA live regions)"
```

**Cursor 프롬프트 38**:
```
"Create src/hooks/useNotifications.ts:
- Fetch notifications from Supabase
- Real-time subscription for new notifications
- Mark as read functionality
- Notification filtering and sorting
- TypeScript interfaces for notification data
- Error handling and loading states"
```

### 3.5 데이터 분석 및 리포트 (Analytics & Reports)

#### 👤 문유가 할 일
- [ ] 리포트 종류 확정 (월간, 연간, 카테고리별)
- [ ] 차트 라이브러리 선택 (Chart.js, Recharts)
- [ ] 데이터 내보내기 형식 결정 (CSV, PDF)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 39**:
```
"Create src/pages/Analytics.tsx:
- Monthly spending trends with charts
- Category breakdown visualization
- Year-over-year comparison
- Export functionality (CSV download)
- Tailwind UI premium chart components
- Glass morphism design elements
- Responsive design with container queries
- Pretendard font and Korean text optimization"
```

**Cursor 프롬프트 40**:
```
"Create src/components/features/analytics/SpendingChart.tsx:
- Line chart for spending trends
- Bar chart for category breakdown
- Interactive tooltips and legends
- Responsive chart sizing
- Dark/light theme support
- Accessibility features (ARIA labels, keyboard navigation)
- Korean text optimization"
```

### 3.6 고급 검색 및 필터링 (Advanced Search & Filtering)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 41**:
```
"Create src/components/features/search/AdvancedSearch.tsx:
- Real-time search with debouncing
- Filter by category, status, price range
- Sort by name, price, next payment date
- Search history and suggestions
- Tailwind UI search patterns
- Glass morphism design elements
- Container queries for responsive layout
- Accessibility features (ARIA labels, keyboard navigation)"
```

**Cursor 프롬프트 42**:
```
"Create src/hooks/useAdvancedSearch.ts:
- Search logic with multiple criteria
- Filter and sort functionality
- Search history management
- Debounced search input
- TypeScript interfaces for search parameters
- Performance optimization with memoization"
```

### 3.7 배치 작업 (Bulk Operations)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 43**:
```
"Create src/components/features/bulk/BulkActions.tsx:
- Checkbox selection for multiple subscriptions
- Bulk pause, resume, delete operations
- Confirmation modals for destructive actions
- Progress indicators for batch operations
- Tailwind UI table patterns with selection
- Glass morphism design elements
- Accessibility features (ARIA labels, keyboard navigation)"
```

**Cursor 프롬프트 44**:
```
"Create src/hooks/useBulkOperations.ts:
- Selection state management
- Bulk operation execution
- Progress tracking and error handling
- Optimistic updates for better UX
- TypeScript interfaces for bulk operations
- Integration with Supabase transactions"
```

### 3.8 데이터 백업 및 동기화 (Backup & Sync)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 45**:
```
"Create src/components/features/backup/DataBackup.tsx:
- Export all subscription data to JSON/CSV
- Import data from external sources
- Data validation and error handling
- Progress indicators for large operations
- Tailwind UI file upload patterns
- Glass morphism design elements
- Accessibility features and keyboard navigation"
```

**Cursor 프롬프트 46**:
```
"Create src/utils/backup.ts:
- Data export functionality (JSON, CSV formats)
- Data import with validation
- Conflict resolution for duplicate data
- Progress tracking for large datasets
- Error handling and recovery
- TypeScript interfaces for backup data"
```

### 3.9 성능 최적화 (Performance Optimization)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 47**:
```
"Optimize existing components for performance:
- Implement React.memo for expensive components
- Add virtualization for large lists
- Optimize images with lazy loading
- Implement code splitting for routes
- Add service worker for offline functionality
- Performance monitoring and analytics"
```

**Cursor 프롬프트 48**:
```
"Create src/components/features/performance/VirtualizedList.tsx:
- Virtual scrolling for large subscription lists
- Dynamic height calculation
- Smooth scrolling and performance optimization
- Accessibility features for screen readers
- Container queries for responsive behavior
- Glass morphism design elements"
```

### 3.10 접근성 강화 (Accessibility Enhancement)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 49**:
```
"Enhance accessibility across all components:
- Add comprehensive ARIA labels
- Implement keyboard navigation
- Add focus management for modals
- Improve color contrast ratios
- Add screen reader announcements
- Test with accessibility tools
- Follow WCAG 2.1 AA guidelines"
```

**Cursor 프롬프트 50**:
```
"Create src/components/features/accessibility/AccessibilityProvider.tsx:
- Skip to main content link
- Focus trap for modals
- Live region announcements
- High contrast mode support
- Reduced motion preferences
- Keyboard shortcut management
- Integration with existing components"
```

---

## Phase 4: 배포 및 최적화 (1주) 🚀

### 4.1 GitHub Actions 설정

#### 👤 문유가 브라우저에서 할 일
- [ ] GitHub Repository → Settings → Secrets and variables → Actions
- [ ] Add repository secret: `VITE_SUPABASE_URL`
- [ ] Add repository secret: `VITE_SUPABASE_ANON_KEY`
- [ ] Settings → Pages → Source: GitHub Actions
- [ ] Settings → Pages → Custom domain (선택사항)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 51**:
```
"Create .github/workflows/deploy.yml:
- Trigger on push to main branch
- Node.js 20 setup with caching
- Install dependencies with npm ci
- Build with environment secrets
- Deploy to GitHub Pages
- Include CNAME file creation for custom domain
- Environment-specific builds (dev/prod)
- Build optimization with compression
- Cache node_modules and build artifacts
- Add deployment status checks"
```

### 4.2 성능 최적화

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 52**:
```
"Update vite.config.ts with advanced optimization:
- Manual chunks for vendor splitting (react, supabase, ui libraries)
- Build optimization with compression (gzip, brotli)
- Source maps for development only
- Base URL for GitHub Pages deployment
- Image optimization plugins (vite-plugin-imagemin)
- Bundle analysis tools (rollup-plugin-visualizer)
- Environment-specific configurations
- PWA plugin integration
- Service worker generation
- Manifest file generation"
```

**Cursor 프롬프트 53**:
```
"Implement advanced performance optimizations:
- React.lazy for route-based code splitting
- Image lazy loading with Intersection Observer
- Service worker for caching strategies (Cache First, Network First)
- Memory leak prevention in components (cleanup effects)
- Bundle size monitoring and optimization
- Core Web Vitals optimization (LCP, FID, CLS)
- Virtual scrolling for large lists
- Debounced search and filtering
- Optimistic updates for better UX
- Preload critical resources"
```

### 4.3 PWA 설정 (Progressive Web App)

#### 👤 문유가 할 일
- [ ] App 아이콘 준비 (512x512, 192x192, 144x144, favicon.ico)
- [ ] App 이름: "Moonwave - 구독 관리"
- [ ] App 설명: "구독 서비스를 체계적으로 관리하세요"
- [ ] 색상 테마: 다크/라이트 모드 지원

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 54**:
```
"Add comprehensive PWA support:
- Install and configure vite-plugin-pwa
- Create manifest.json with Moonwave branding
- Service worker registration with caching strategies
- Offline functionality with fallback pages
- Install prompt and app-like experience
- Background sync for data updates
- Push notifications setup
- App icons in multiple sizes
- Theme colors and display modes
- Splash screen configuration"
```

**Cursor 프롬프트 55**:
```
"Create src/service-worker.ts:
- Cache strategies for static assets (Cache First)
- Dynamic caching for API responses (Network First)
- Background sync for offline actions
- Push notification handling
- Update notifications for new versions
- Fallback pages for offline access
- Cache cleanup and version management
- Performance monitoring and analytics
- Error handling and recovery
- Service worker lifecycle management"
```

### 4.4 디자인 시스템 통합 및 최적화

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 56**:
```
"Integrate all design guidelines from 문서들:
- Apply Footer 디자인가이드 to all footer components
- Implement 디자인가이드 v2.1 across all components
- Apply 로그인 회원가입 디자인 가이드 to auth pages
- Follow 화면정의서 specifications for all screens
- Ensure consistent Pretendard font usage
- Apply glass morphism effects consistently
- Implement container queries throughout
- Add dark/light theme support
- Optimize for Core Web Vitals
- Ensure accessibility compliance"
```

**Cursor 프롬프트 57**:
```
"Create comprehensive design system documentation:
- Component library with all UI components
- Design tokens and utility classes
- Accessibility guidelines and examples
- Responsive design patterns
- Animation and interaction guidelines
- Theme customization options
- Performance best practices
- Browser compatibility matrix
- Mobile-first design principles
- Internationalization support"
```

### 4.5 최종 테스트 및 배포

#### 👤 문유가 브라우저에서 할 일
- [ ] 로컬 빌드 테스트 (`npm run build && npm run preview`)
- [ ] 모든 기능 수동 테스트 (Phase 1-3)
- [ ] 반응형 디자인 확인 (모바일, 태블릿, 데스크톱)
- [ ] 접근성 테스트 (키보드 네비게이션, 스크린 리더)
- [ ] 성능 테스트 (Lighthouse, Core Web Vitals)
- [ ] GitHub Actions 실행 확인
- [ ] 배포된 사이트 접속 테스트
- [ ] PWA 설치 및 오프라인 테스트
- [ ] 크로스 브라우저 테스트 (Chrome, Firefox, Safari, Edge)

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 58**:
```
"Create comprehensive test suite:
- Unit tests for all utility functions (Vitest)
- Component tests with React Testing Library
- Integration tests for user workflows
- E2E tests with Playwright
- Performance tests with Lighthouse CI
- Accessibility tests with axe-core
- Visual regression tests
- API integration tests
- Error boundary tests
- Service worker tests"
```

**터미널에서 실행**:
```bash
# 로컬 빌드 테스트
npm run build
npm run preview

# 테스트 실행
npm run test
npm run test:e2e

# 성능 분석
npm run lighthouse

# 최종 커밋 및 푸시
git add .
git commit -m "feat: complete v2.0 development with advanced features and deployment"
git push origin main
```

### 4.6 문서화 및 가이드 작성

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 59**:
```
"Create comprehensive project documentation:
- README.md with setup and usage instructions
- API documentation for all endpoints
- Component documentation with Storybook
- Deployment guide with troubleshooting
- Contributing guidelines
- Changelog and version history
- Performance benchmarks and metrics
- Security best practices
- Monitoring and analytics setup
- Backup and recovery procedures"
```

**Cursor 프롬프트 60**:
```
"Create user and developer guides:
- User manual with screenshots
- Developer setup guide
- Design system documentation
- Accessibility guidelines
- Performance optimization tips
- Troubleshooting guide
- FAQ and common issues
- Video tutorials and demos
- Best practices documentation
- Migration guide from v1.0"
```

### 4.7 모니터링 및 분석 설정

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 61**:
```
"Implement comprehensive monitoring:
- Error tracking with Sentry integration
- Performance monitoring with Web Vitals
- User analytics with privacy-first approach
- Real User Monitoring (RUM)
- Custom event tracking
- A/B testing framework
- Feature flag system
- Health check endpoints
- Logging and debugging tools
- Alert system for critical issues"
```

### 4.8 보안 강화

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 62**:
```
"Implement security best practices:
- Content Security Policy (CSP) headers
- HTTPS enforcement
- XSS protection
- CSRF protection
- Input validation and sanitization
- Secure authentication practices
- Data encryption at rest and in transit
- Regular security audits
- Dependency vulnerability scanning
- Security headers configuration"
```

### 4.9 SEO 최적화

#### 🤖 Cursor에서 실행할 작업

**Cursor 프롬프트 63**:
```
"Implement comprehensive SEO optimization:
- Meta tags and Open Graph data
- Structured data (JSON-LD)
- Sitemap generation
- Robots.txt configuration
- Canonical URLs
- Image optimization with alt tags
- Semantic HTML structure
- Page speed optimization
- Mobile-first indexing
- Social media optimization"
```

### 4.10 최종 배포 및 런칭

#### 👤 문유가 브라우저에서 할 일
- [ ] GitHub Actions 성공 확인
- [ ] 배포된 사이트 접속 및 기능 테스트
- [ ] PWA 설치 테스트
- [ ] 오프라인 기능 테스트
- [ ] 성능 점수 확인 (Lighthouse)
- [ ] 접근성 점수 확인
- [ ] SEO 점수 확인
- [ ] 소셜 미디어 공유 테스트
- [ ] 사용자 피드백 수집 준비

#### 🤖 Cursor에서 실행할 작업

**터미널에서 최종 배포**:
```bash
# 최종 빌드 및 배포
npm run build
npm run test:all
npm run lighthouse:ci

# 배포 확인
git status
git add .
git commit -m "feat: final deployment preparation for v2.0 launch"
git push origin main

# 배포 후 확인
echo "🚀 Moonwave v2.0 배포 완료!"
echo "📊 성능 모니터링 시작"
echo "🎯 사용자 피드백 수집 준비"
```

---

## 🎯 Phase 4 배포 및 최적화 완료 체크리스트

### ✅ 기술적 완료사항
- [ ] GitHub Actions CI/CD 파이프라인 구축
- [ ] PWA 설정 및 오프라인 기능
- [ ] 성능 최적화 (Core Web Vitals)
- [ ] 보안 강화 및 모니터링
- [ ] SEO 최적화
- [ ] 접근성 준수 (WCAG 2.1 AA)
- [ ] 크로스 브라우저 호환성
- [ ] 모바일 최적화

### ✅ 사용자 경험 완료사항
- [ ] 빠른 로딩 속도 (< 3초)
- [ ] 직관적인 네비게이션
- [ ] 반응형 디자인
- [ ] 오프라인 기능
- [ ] 설치 가능한 앱 경험
- [ ] 접근성 지원
- [ ] 다국어 지원 준비

### ✅ 비즈니스 완료사항
- [ ] 사용자 분석 도구
- [ ] 성능 모니터링
- [ ] 오류 추적 시스템
- [ ] 백업 및 복구 시스템
- [ ] 확장 가능한 아키텍처
- [ ] 문서화 완료

---

*Phase 4는 Moonwave v2.0의 최종 배포와 최적화를 담당하며, 사용자에게 최고의 경험을 제공하기 위한 모든 기술적 요소를 포함합니다. 모든 디자인 가이드와 최신 웹 표준을 준수하여 현대적이고 안정적인 애플리케이션을 구축합니다.*

---

## 🎯 일일 작업 플로우

### 아침 시작 루틴
1. **문유**: Supabase Dashboard 확인
2. **Cursor**: `git pull` 실행
3. **Cursor**: `npm run dev` 시작

### 기능 개발 플로우
1. **문유**: 기능 요구사항 정의
2. **Cursor**: 컴포넌트/훅 생성 (프롬프트 사용)
3. **문유**: 브라우저에서 테스트
4. **Cursor**: 버그 수정 및 개선

### 일일 마무리
1. **Cursor**: 
   ```bash
   git add .
   git commit -m "feat/fix/refactor: 작업 내용"
   git push origin main
   ```
2. **문유**: GitHub Actions 확인
3. **문유**: 배포 사이트 확인

---

## 📝 Cursor 프롬프트 팁

### 효과적인 프롬프트 구조
```
"Create [파일경로]:
- [기술 스택 명시]
- [주요 기능 나열]
- [디자인 시스템 참조]
- [타입 안전성 요구]
- [에러 처리 포함]"
```

### 리팩토링 요청
```
"Refactor [파일명] to:
- Improve performance using [기법]
- Add proper TypeScript types
- Include error boundaries
- Add loading states"
```

---

## 📋 Phase 3 고급 기능 개발 요약

### 🎨 디자인 가이드 통합 완료
- **Footer 디자인가이드**: Music Player, Floating Actions, Main Footer 컴포넌트 적용
- **디자인가이드 v2.1**: Tailwind UI 프리미엄 컴포넌트, Pretendard 폰트, Container Queries
- **로그인 회원가입 디자인 가이드**: Glass morphism, 그라디언트 배경, 접근성 강화
- **화면정의서**: 모든 화면의 상세 UI/UX 스펙 준수

### 🚀 고급 기능 확장
- **결제 캘린더**: 월간 뷰, 서비스 아이콘, 호버 상세정보
- **환율 관리**: 실시간 API, 모달 편집, 컨텍스트 업데이트
- **설정 페이지**: 프로필, 알림, 계정 관리 통합
- **알림 시스템**: 실시간, 카테고리별, 읽음 처리
- **데이터 분석**: 차트, 리포트, 내보내기 기능
- **고급 검색**: 실시간, 필터링, 정렬, 히스토리
- **배치 작업**: 다중 선택, 일괄 처리, 진행률 표시
- **데이터 백업**: JSON/CSV 내보내기, 가져오기, 검증
- **성능 최적화**: 가상화, 코드 분할, 메모이제이션
- **접근성 강화**: WCAG 2.1 AA 준수, 키보드 네비게이션

### 🔧 기술적 개선사항
- **Container Queries**: 모든 컴포넌트에 반응형 개선
- **Glass Morphism**: 일관된 글래스 효과 적용
- **Pretendard 폰트**: 한글 최적화 완료
- **Tailwind UI**: 프리미엄 컴포넌트 활용
- **TypeScript**: 타입 안전성 강화
- **접근성**: ARIA 레이블, 키보드 지원, 스크린 리더

### 📊 프롬프트 확장
- **Phase 3**: 23개 프롬프트 (28-50)
- **Phase 4**: 10개 프롬프트 (51-60)
- **총 프롬프트**: 60개 (전체 개발 과정)

---

*이 체크리스트는 Cursor AI의 강력한 코드 생성 능력을 최대한 활용하면서, 문유가 전략적 결정에 집중할 수 있도록 설계되었습니다. 모든 디자인 가이드와 화면정의서가 Phase 3 고급 기능 개발에 완전히 통합되었습니다.*

## 🔧 Common Mistakes and Solutions

### ❌ Common Mistakes

1. **Creating duplicate src folders**
   - ❌ Wrong: Creating another src folder inside SMS_V.2.0
   - ✅ Correct: Use existing SMS_V.2.0/src folder created by Vite

2. **Running commands in wrong directory**
   - ❌ Wrong: Running npm commands from repository root
   - ✅ Correct: Always `cd SMS_V.2.0` first

3. **GitHub Actions in wrong location**
   - ❌ Wrong: Placing workflows in SMS_V.2.0/.github/
   - ✅ Correct: Place in root .github/workflows/

4. **npm dependency conflicts**
   - ❌ Wrong: Using `npm install` without --legacy-peer-deps
   - ✅ Correct: Use `npm install --legacy-peer-deps`

5. **Incorrect file paths in imports**
   - ❌ Wrong: `import Button from '../components/Button'`
   - ✅ Correct: `import Button from '@/components/ui/Button'`

### ✅ Solutions

1. **Directory Structure Verification**
   ```bash
   # Always verify you're in the right directory
   pwd  # Should show: /workspace/SMS_V.2.0
   ls   # Should show: src/, package.json, vite.config.ts, etc.
   ```

2. **Path Alias Configuration**
   ```typescript
   // SMS_V.2.0/tsconfig.app.json
   {
     "compilerOptions": {
       "paths": {
         "@/*": ["./src/*"]
       }
     }
   }
   ```

3. **GitHub Actions Directory Structure**
   ```
   Repository Root/
   ├── .github/
   │   └── workflows/
   │       ├── deploy.yml
   │       └── ci.yml
   └── SMS_V.2.0/
       ├── src/
       ├── package.json
       └── vite.config.ts
   ```

4. **Environment Variables**
   ```bash
   # SMS_V.2.0/.env.local (for development)
   VITE_SUPABASE_URL=your_supabase_url
   VITE_SUPABASE_ANON_KEY=your_anon_key
   ```

5. **Build and Deploy Commands**
   ```bash
   # Development
   cd SMS_V.2.0
   npm run dev

   # Build
   cd SMS_V.2.0
   npm run build

   # Deploy (GitHub Actions handles this automatically)
   git add .
   git commit -m "feat: new feature"
   git push origin main
   ```

## 📋 Verification Checklist

Before starting any development session:

- [ ] Verify you are in SMS_V.2.0 directory: `pwd`
- [ ] Check that src folder exists: `ls src/`
- [ ] Verify package.json exists: `ls package.json`
- [ ] Confirm GitHub Actions are in root .github folder
- [ ] Test npm install with --legacy-peer-deps
- [ ] Verify @ alias works in imports
- [ ] Check that vite.config.ts has correct base path

## 🚀 Quick Start Commands

```bash
# Clone repository
git clone https://github.com/yourusername/moonwave-v2.git
cd moonwave-v2

# Navigate to project directory
cd SMS_V.2.0

# Install dependencies
npm install --legacy-peer-deps

# Start development server
npm run dev

# Build for production
npm run build

# Deploy (automatic via GitHub Actions)
git add .
git commit -m "feat: new feature"
git push origin main
```
